//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using System.IO;
using JetBrains.ReSharper.Psi.Parsing;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree
{
  public partial class PsiGeneratedGetterTestUtil : PsiGetterTestUtil
  {
      internal static void TestFSharpFileNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpFileNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.IImplementationUnitNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpFileNode)param).ImplementationUnitNode;
        TestImplementationUnitNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IImplementationUnitNode)child, "ImplementationUnitNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpFileNode)param).ModuleKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "ModuleKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpFileNode)param).ModuleNameNode;
        TestQualifiedIdentifierNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode)child, "ModuleNameNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpFileNode)param).IdentifierName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "IdentifierName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IImplementationUnit child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpFile)param).ImplementationUnit;
        TestImplementationUnitNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IImplementationUnitNode)child, "ImplementationUnit");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierName child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpFile)param).ModuleName;
        TestQualifiedIdentifierNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode)child, "ModuleName");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IDefinition> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpFile)param).Definitions;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IDefinition child in children)
        TestDefinitionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IDefinitionNode)child, "Definitions");
      }
    }
      internal static void TestAlgebraicTypeRepresentationNode (int level, JetBrains.ReSharper.Psi.FSharp.IAlgebraicTypeRepresentationNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode> children = ((JetBrains.ReSharper.Psi.FSharp.IAlgebraicTypeRepresentationNode)param).ConstructorsNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode child in children)
        TestConstructorDeclarationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode)child, "ConstructorsNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IAlgebraicTypeRepresentationNode)param).Or;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Or");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration> children = ((JetBrains.ReSharper.Psi.FSharp.IAlgebraicTypeRepresentation)param).Constructors;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration child in children)
        TestConstructorDeclarationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode)child, "Constructors");
      }
    }
      internal static void TestAndExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IAndExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IAndExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IAndExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IAndExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IAndExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IAndExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestApplicationExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IApplicationExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IApplicationExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IApplicationExpressionNode)param).OperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "OperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IApplicationExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IApplicationExpression)param).Operand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Operand");
      }
    }
      internal static void TestArrayExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IArrayExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IArrayExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IArrayExpressionNode)param).LBracket;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBracket");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IArrayExpressionNode)param).RBracket;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RBracket");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IArrayExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
    }
      internal static void TestArrayPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.IArrayPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IArrayPatternNode)param).LBracket;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBracket");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode> children = ((JetBrains.ReSharper.Psi.FSharp.IArrayPatternNode)param).PatternsNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child in children)
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "PatternsNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IArrayPatternNode)param).RBracket;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RBracket");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IArrayPatternNode)param).Semicolon;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Semicolon");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPattern> children = ((JetBrains.ReSharper.Psi.FSharp.IArrayPattern)param).Patterns;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child in children)
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Patterns");
      }
    }
      internal static void TestArrayTypeNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IArrayTypeNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IArrayTypeNode)param).ArrayNameNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "ArrayNameNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IArrayTypeNode)param).Comma;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Comma");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IArrayTypeNode)param).LBracket;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBracket");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IArrayTypeNode)param).RBracket;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RBracket");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IArrayType)param).ArrayName;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "ArrayName");
      }
    }
      internal static void TestAsValuePatternNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IAsValuePatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IAsValuePatternNode)param).AsKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "AsKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IAsValuePatternNode)param).PatternNode;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "PatternNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IAsValuePatternNode)param).ValueName;
        TestValueNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode)child, "ValueName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IAsValuePattern)param).Pattern;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Pattern");
      }
    }
      internal static void TestAssertExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IAssertExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IAssertExpressionNode)param).AssertKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "AssertKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IAssertExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IAssertExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
    }
      internal static void TestAssignExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IAssignExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IAssignExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IAssignExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IAssignExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IAssignExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IAssignExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestAssignFieldExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IAssignFieldExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IAssignFieldExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IAssignFieldExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IAssignFieldExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IAssignFieldExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IAssignFieldExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestAttributeNode (int level, JetBrains.ReSharper.Psi.FSharp.IAttributeNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IAttributeNode)param).ArgumentList;
        TestTupleExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)child, "ArgumentList");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IAttributeNode)param).GtRBracet;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "GtRBracet");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IAttributeNode)param).LBracetLt;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBracetLt");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IAttributeNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IAttributeNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
    }
      internal static void TestAttributeReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.IAttributeReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IAttributeReferenceNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.IAttributeReferenceNode)param).QualifierNode;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "QualifierNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.IAttributeReferenceNode)param).ReferenceName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "ReferenceName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReference child = ((JetBrains.ReSharper.Psi.FSharp.IAttributeReference)param).Qualifier;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "Qualifier");
      }
    }
      internal static void TestBinaryAddExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IBinaryAddExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryAddExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryAddExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryAddExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryAddExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryAddExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestBinaryExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IBinaryExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.IBinaryAddExpressionNode) TestBinaryAddExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IBinaryAddExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IBinaryMultExpressionNode) TestBinaryMultExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IBinaryMultExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IBinaryPowerExpressionNode) TestBinaryPowerExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IBinaryPowerExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IComparisonExpressionNode) TestComparisonExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IComparisonExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IAndExpressionNode) TestAndExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IAndExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IOrExpressionNode) TestOrExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IOrExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IListConcatenateExpressionNode) TestListConcatenateExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IListConcatenateExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IStringConcatenateExpressionNode) TestStringConcatenateExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IStringConcatenateExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IAssignExpressionNode) TestAssignExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IAssignExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IAssignFieldExpressionNode) TestAssignFieldExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IAssignFieldExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IListConstructorExpressionNode) TestListConstructorExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IListConstructorExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IInfixOperatorExpressionNode) TestInfixOperatorExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IInfixOperatorExpressionNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestBinaryMultExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IBinaryMultExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryMultExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryMultExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryMultExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryMultExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryMultExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestBinaryPowerExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IBinaryPowerExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryPowerExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryPowerExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryPowerExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryPowerExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IBinaryPowerExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestBindingNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IAttributeNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode)param).AttributesNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.IAttributeNode child in children)
        TestAttributeNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IAttributeNode)child, "AttributesNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode)param).Eq;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Eq");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSourceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode)param).SourceNode;
        TestBindingSourceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSourceNode)child, "SourceNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode)param).TargetNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "TargetNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IAttribute> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBinding)param).Attributes;
        foreach (JetBrains.ReSharper.Psi.FSharp.IAttribute child in children)
        TestAttributeNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IAttributeNode)child, "Attributes");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSource child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBinding)param).Source;
        TestBindingSourceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSourceNode)child, "Source");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBinding)param).Target;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Target");
      }
    }
      internal static void TestBindingPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.IBindingPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child = ((JetBrains.ReSharper.Psi.FSharp.IBindingPatternNode)param).PatternNode;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "PatternNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child = ((JetBrains.ReSharper.Psi.FSharp.IBindingPattern)param).Pattern;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Pattern");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinition child = ((JetBrains.ReSharper.Psi.FSharp.IBindingPattern)param).ContainingLetDefinition;
        TestLetDefinitionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode)child, "ContainingLetDefinition");
      }
    }
      internal static void TestBindingSchemeNode (int level, JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.IDoExpressionNode) TestDoExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IDoExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode) TestBindingNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestBindingSourceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSourceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.IBindingValueSchemeNode) TestBindingValueSchemeNode (level, (JetBrains.ReSharper.Psi.FSharp.IBindingValueSchemeNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IBindingPatternNode) TestBindingPatternNode (level, (JetBrains.ReSharper.Psi.FSharp.IBindingPatternNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestBindingValueNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValueNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValueNode)param).Colon;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Colon");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValueNode)param).ParametersNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child in children)
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "ParametersNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValueNode)param).TypeExpressionNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValueNode)param).ValueName;
        TestValueNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode)child, "ValueName");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPattern> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValue)param).Parameters;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child in children)
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Parameters");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValue)param).TypeExpression;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpression");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinition child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValue)param).ContainingLetDefinition;
        TestLetDefinitionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode)child, "ContainingLetDefinition");
      }
    }
      internal static void TestBindingValueSchemeNode (int level, JetBrains.ReSharper.Psi.FSharp.IBindingValueSchemeNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValueNode) TestBindingValueNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValueNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IMutableBindingValueNode) TestMutableBindingValueNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IMutableBindingValueNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestBracketedExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IBracketedExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IBracketedExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IBracketedExpressionNode)param).LBracket;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBracket");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IBracketedExpressionNode)param).RBracket;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RBracket");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IBracketedExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
    }
      internal static void TestBracketedFieldValueExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IBracketedFieldValueExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IBracketedFieldValueExpressionNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IBracketedFieldValueExpressionNode)param).LBracket;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBracket");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IBracketedFieldValueExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IBracketedFieldValueExpressionNode)param).RBracket;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RBracket");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IBracketedFieldValueExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IBracketedFieldValueExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IBracketedFieldValueExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestBracketedPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.IBracketedPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IBracketedPatternNode)param).LBracket;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBracket");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode> children = ((JetBrains.ReSharper.Psi.FSharp.IBracketedPatternNode)param).PatternsNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child in children)
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "PatternsNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IBracketedPatternNode)param).RBracket;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RBracket");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IBracketedPatternNode)param).Semicolon;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Semicolon");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPattern> children = ((JetBrains.ReSharper.Psi.FSharp.IBracketedPattern)param).Patterns;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child in children)
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Patterns");
      }
    }
      internal static void TestComparisonExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IComparisonExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IComparisonExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IComparisonExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IComparisonExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IComparisonExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IComparisonExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestConstantExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IConstantExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpTreeNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IConstantExpressionNode)param).Value;
        TestFSharpTreeNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpTreeNode)child, "Value");
      }
    }
      internal static void TestConstantPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IConstantPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpTreeNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IConstantPatternNode)param).Value;
        TestFSharpTreeNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpTreeNode)child, "Value");
      }
    }
      internal static void TestConstructorDeclarationNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode)param).ConstructorName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "ConstructorName");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode)param).OfKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OfKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode)param).TypeExpressionNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration)param).TypeExpression;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpression");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclaration child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration)param).TypeDeclaration;
        TestTypeDeclarationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclarationNode)child, "TypeDeclaration");
      }
    }
      internal static void TestConstructorReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorReferenceNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorReferenceNode)param).QualifierNode;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "QualifierNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorReferenceNode)param).ReferenceName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "ReferenceName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReference child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorReference)param).Qualifier;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "Qualifier");
      }
    }
      internal static void TestCreationExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode)param).ArgumentListNode;
        TestTupleExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)child, "ArgumentListNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode)param).CreatedTypeNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "CreatedTypeNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode)param).NewKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "NewKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.ITupleExpression child = ((JetBrains.ReSharper.Psi.FSharp.ICreationExpression)param).ArgumentList;
        TestTupleExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)child, "ArgumentList");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.ICreationExpression)param).CreatedType;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "CreatedType");
      }
    }
      internal static void TestCreationWithOverridingMethodsExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpressionNode)param).AndKeyword;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "AndKeyword");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode> children = ((JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpressionNode)param).BindingSchemesNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode child in children)
        TestBindingSchemeNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)child, "BindingSchemesNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpressionNode)param).CreationExpressionNode;
        TestCreationExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode)child, "CreationExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpressionNode)param).LBrace;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBrace");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpressionNode)param).RBrace;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RBrace");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpressionNode)param).WithKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "WithKeyword");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IBindingScheme> children = ((JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpression)param).BindingSchemes;
        foreach (JetBrains.ReSharper.Psi.FSharp.IBindingScheme child in children)
        TestBindingSchemeNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)child, "BindingSchemes");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.ICreationExpression child = ((JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpression)param).CreationExpression;
        TestCreationExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode)child, "CreationExpression");
      }
    }
      internal static void TestDefinitionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IDefinitionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode) TestLetDefinitionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDefinitionNode) TestExceptionDefinitionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDefinitionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDefinitionNode) TestTypeDefinitionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDefinitionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IDoExpressionDefinitionNode) TestDoExpressionDefinitionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IDoExpressionDefinitionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IOpenModuleDefinitionNode) TestOpenModuleDefinitionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IOpenModuleDefinitionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IValueSpecificationNode) TestValueSpecificationNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueSpecificationNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestDisjunctionPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.IDisjunctionPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child = ((JetBrains.ReSharper.Psi.FSharp.IDisjunctionPatternNode)param).LeftPatternNode;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "LeftPatternNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IDisjunctionPatternNode)param).Or;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Or");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child = ((JetBrains.ReSharper.Psi.FSharp.IDisjunctionPatternNode)param).RightPatternNode;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "RightPatternNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child = ((JetBrains.ReSharper.Psi.FSharp.IDisjunctionPattern)param).LeftPattern;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "LeftPattern");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child = ((JetBrains.ReSharper.Psi.FSharp.IDisjunctionPattern)param).RightPattern;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "RightPattern");
      }
    }
      internal static void TestDoExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IDoExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IDoExpressionNode)param).DoKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "DoKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IDoExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IDoExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
    }
      internal static void TestDoExpressionDefinitionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IDoExpressionDefinitionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IDoExpressionDefinitionNode)param).DoKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "DoKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IDoExpressionDefinitionNode)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
    }
      internal static void TestDowncastExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionNode)param).DowncastKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "DowncastKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IDowncastExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
    }
      internal static void TestDowncastExpressionToTypeNode (int level, JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionToTypeNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionToTypeNode)param).ColonQuestGT;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "ColonQuestGT");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionToTypeNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionToTypeNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionToTypeNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionToTypeNode)param).TypeNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionToType)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionToType)param).Type;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "Type");
      }
    }
      internal static void TestEmptyArrayNode (int level, JetBrains.ReSharper.Psi.FSharp.IEmptyArrayNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IEmptyArrayNode)param).LArrayBracket;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LArrayBracket");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IEmptyArrayNode)param).RArray;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RArray");
      }
    }
      internal static void TestEmptyListNode (int level, JetBrains.ReSharper.Psi.FSharp.IEmptyListNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IEmptyListNode)param).LBracket;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBracket");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IEmptyListNode)param).RBracket;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RBracket");
      }
    }
      internal static void TestExceptionAliasNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionAliasNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionAliasNode)param).AliasReferenceNode;
        TestExceptionReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionReferenceNode)child, "AliasReferenceNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionAliasNode)param).Eq;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Eq");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionAliasNode)param).ExceptionKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "ExceptionKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionAliasNode)param).ExceptionName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "ExceptionName");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionAliasNode)param).OFKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OFKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionAliasNode)param).TypeExpressionNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionReference child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionAlias)param).AliasReference;
        TestExceptionReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionReferenceNode)child, "AliasReference");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionAlias)param).TypeExpression;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpression");
      }
    }
      internal static void TestExceptionDeclarationNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDeclarationNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDeclarationNode)param).ExceptionKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "ExceptionKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDeclarationNode)param).ExceptionName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "ExceptionName");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDeclarationNode)param).OFKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OFKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDeclarationNode)param).TypeExpressionNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDeclaration)param).TypeExpression;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpression");
      }
    }
      internal static void TestExceptionDefinitionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDefinitionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionAliasNode) TestExceptionAliasNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionAliasNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDeclarationNode) TestExceptionDeclarationNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDeclarationNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestExceptionReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionReferenceNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionReferenceNode)param).QualifierNode;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "QualifierNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionReferenceNode)param).ReferenceName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "ReferenceName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReference child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionReference)param).Qualifier;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "Qualifier");
      }
    }
      internal static void TestExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode) TestTupleExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IExpressionSequenceNode) TestExpressionSequenceNode (level, (JetBrains.ReSharper.Psi.FSharp.IExpressionSequenceNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IApplicationExpressionNode) TestApplicationExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IApplicationExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IValueReferenceExpressionNode) TestValueReferenceExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueReferenceExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.ILocalDeclarationsInExpressionNode) TestLocalDeclarationsInExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.ILocalDeclarationsInExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.ITypedExpressionNode) TestTypedExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.ITypedExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IConstantExpressionNode) TestConstantExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IConstantExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IParenthesizedExpressionNode) TestParenthesizedExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IParenthesizedExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IBracketedExpressionNode) TestBracketedExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IBracketedExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IArrayExpressionNode) TestArrayExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IArrayExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IRecordExpressionNode) TestRecordExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IRecordExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IWithRecordExpressionNode) TestWithRecordExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IWithRecordExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpressionNode) TestCreationWithOverridingMethodsExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IUnaryMinusExpressionNode) TestUnaryMinusExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IUnaryMinusExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IPrefixOperatorExpressionNode) TestPrefixOperatorExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IPrefixOperatorExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IBinaryAddExpressionNode) TestBinaryAddExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IBinaryAddExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IBinaryMultExpressionNode) TestBinaryMultExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IBinaryMultExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IBinaryPowerExpressionNode) TestBinaryPowerExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IBinaryPowerExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IComparisonExpressionNode) TestComparisonExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IComparisonExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IAndExpressionNode) TestAndExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IAndExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IOrExpressionNode) TestOrExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IOrExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IListConcatenateExpressionNode) TestListConcatenateExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IListConcatenateExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IStringConcatenateExpressionNode) TestStringConcatenateExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IStringConcatenateExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IAssignExpressionNode) TestAssignExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IAssignExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IAssignFieldExpressionNode) TestAssignFieldExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IAssignFieldExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IListConstructorExpressionNode) TestListConstructorExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IListConstructorExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IInfixOperatorExpressionNode) TestInfixOperatorExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IInfixOperatorExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IMemberAccessExpressionNode) TestMemberAccessExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IMemberAccessExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IParenthesizedFieldValueExpressionNode) TestParenthesizedFieldValueExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IParenthesizedFieldValueExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IBracketedFieldValueExpressionNode) TestBracketedFieldValueExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IBracketedFieldValueExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IExpressionBlockNode) TestExpressionBlockNode (level, (JetBrains.ReSharper.Psi.FSharp.IExpressionBlockNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IIfStatementExpressionNode) TestIfStatementExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IIfStatementExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IWhileStatementExpressionNode) TestWhileStatementExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IWhileStatementExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode) TestForStatementExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IFunExpressionNode) TestFunExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IFunExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IFunctionExpressionNode) TestFunctionExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IFunctionExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.ITryWithExpressionNode) TestTryWithExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.ITryWithExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.ITryFinallyExpressionNode) TestTryFinallyExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.ITryFinallyExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IMatchExpressionNode) TestMatchExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IMatchExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode) TestCreationExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IAssertExpressionNode) TestAssertExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IAssertExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.ILazyExpressionNode) TestLazyExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.ILazyExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionNode) TestUpcastExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionNode) TestDowncastExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionToTypeNode) TestUpcastExpressionToTypeNode (level, (JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionToTypeNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionToTypeNode) TestDowncastExpressionToTypeNode (level, (JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionToTypeNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.ITypeTestExpressionNode) TestTypeTestExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.ITypeTestExpressionNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestExpressionBlockNode (int level, JetBrains.ReSharper.Psi.FSharp.IExpressionBlockNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IExpressionBlockNode)param).BeginKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "BeginKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IExpressionBlockNode)param).BlockNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "BlockNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IExpressionBlockNode)param).EndKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "EndKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IExpressionBlock)param).Block;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Block");
      }
    }
      internal static void TestExpressionSequenceNode (int level, JetBrains.ReSharper.Psi.FSharp.IExpressionSequenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IExpressionSequenceNode)param).Expression1Node;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression1Node");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IExpressionSequenceNode)param).Expression2Node;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression2Node");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IExpressionSequenceNode)param).Semicolon;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Semicolon");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IExpressionSequence)param).Expression1;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression1");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IExpressionSequence)param).Expression2;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression2");
      }
    }
      internal static void TestFieldAssignmentNode (int level, JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentNode)param).Eq;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Eq");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IFieldReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentNode)param).FieldName;
        TestFieldReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldReferenceNode)child, "FieldName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentNode)param).FieldValueNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "FieldValueNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IFieldAssignment)param).FieldValue;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "FieldValue");
      }
    }
      internal static void TestFieldAssignmentListNode (int level, JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentListNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentNode> children = ((JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentListNode)param).FieldAssignmentsNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentNode child in children)
        TestFieldAssignmentNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentNode)child, "FieldAssignmentsNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentListNode)param).Semicolon;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Semicolon");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IFieldAssignment> children = ((JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentList)param).FieldAssignments;
        foreach (JetBrains.ReSharper.Psi.FSharp.IFieldAssignment child in children)
        TestFieldAssignmentNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentNode)child, "FieldAssignments");
      }
    }
      internal static void TestFieldDeclarationNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclarationNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclarationNode)param).Colon;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Colon");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclarationNode)param).FieldName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "FieldName");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclarationNode)param).MutableKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "MutableKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.ITypeSchemeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclarationNode)param).typeSchemeExpressionNode;
        TestTypeSchemeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.ITypeSchemeExpressionNode)child, "typeSchemeExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.ITypeSchemeExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration)param).typeSchemeExpression;
        TestTypeSchemeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.ITypeSchemeExpressionNode)child, "typeSchemeExpression");
      }
    }
      internal static void TestFieldDeclarationListNode (int level, JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclarationNode> children = ((JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode)param).FieldDeclarationsNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclarationNode child in children)
        TestFieldDeclarationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclarationNode)child, "FieldDeclarationsNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode)param).Semicolon;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Semicolon");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration> children = ((JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationList)param).FieldDeclarations;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration child in children)
        TestFieldDeclarationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclarationNode)child, "FieldDeclarations");
      }
    }
      internal static void TestFieldPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.IFieldPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IFieldPatternNode)param).Eq;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Eq");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IFieldReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.IFieldPatternNode)param).FieldNameNode;
        TestFieldReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldReferenceNode)child, "FieldNameNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child = ((JetBrains.ReSharper.Psi.FSharp.IFieldPatternNode)param).PatternNode;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "PatternNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IFieldReference child = ((JetBrains.ReSharper.Psi.FSharp.IFieldPattern)param).FieldName;
        TestFieldReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldReferenceNode)child, "FieldName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child = ((JetBrains.ReSharper.Psi.FSharp.IFieldPattern)param).Pattern;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Pattern");
      }
    }
      internal static void TestFieldPatternListNode (int level, JetBrains.ReSharper.Psi.FSharp.IFieldPatternListNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IFieldPatternNode> children = ((JetBrains.ReSharper.Psi.FSharp.IFieldPatternListNode)param).FieldPatternsNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.IFieldPatternNode child in children)
        TestFieldPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IFieldPatternNode)child, "FieldPatternsNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IFieldPatternListNode)param).Semicolon;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Semicolon");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IFieldPattern> children = ((JetBrains.ReSharper.Psi.FSharp.IFieldPatternList)param).FieldPatterns;
        foreach (JetBrains.ReSharper.Psi.FSharp.IFieldPattern child in children)
        TestFieldPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IFieldPatternNode)child, "FieldPatterns");
      }
    }
      internal static void TestFieldReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IFieldReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFieldReferenceNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFieldReferenceNode)param).QualifierNode;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "QualifierNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFieldReferenceNode)param).ReferenceName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "ReferenceName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReference child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFieldReference)param).Qualifier;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "Qualifier");
      }
    }
      internal static void TestForAllTypeExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IForAllTypeExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IForAllTypeExpressionNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode child = ((JetBrains.ReSharper.Psi.FSharp.IForAllTypeExpressionNode)param).Parameter;
        TestTypeParameterDeclarationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode)child, "Parameter");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IForAllTypeExpressionNode)param).ParameterizedTypeExpressionNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "ParameterizedTypeExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.IForAllTypeExpression)param).ParameterizedTypeExpression;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "ParameterizedTypeExpression");
      }
    }
      internal static void TestForStatementExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode)param).BodyNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "BodyNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode)param).DoKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "DoKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode)param).DoneKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "DoneKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode)param).DowntoKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "DowntoKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode)param).Eq;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Eq");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode)param).ForKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "ForKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode)param).LoopVariable;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "LoopVariable");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode)param).LowerBoundNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LowerBoundNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode)param).ToKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "ToKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpressionNode)param).UpperBoundNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "UpperBoundNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpression)param).Body;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Body");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpression)param).LowerBound;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LowerBound");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpression)param).UpperBound;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "UpperBound");
      }
    }
      internal static void TestFunExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IFunExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IFunExpressionNode)param).FunKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "FunKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatchingNode child = ((JetBrains.ReSharper.Psi.FSharp.IFunExpressionNode)param).FunctionDefinitionNode;
        TestMultipleMatchingNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatchingNode)child, "FunctionDefinitionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatching child = ((JetBrains.ReSharper.Psi.FSharp.IFunExpression)param).FunctionDefinition;
        TestMultipleMatchingNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatchingNode)child, "FunctionDefinition");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IFunExpression)param).Condition;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Condition");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPattern> children = ((JetBrains.ReSharper.Psi.FSharp.IFunExpression)param).Parameters;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child in children)
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Parameters");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IFunExpression)param).Target;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Target");
      }
    }
      internal static void TestFunctionExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IFunctionExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.IPatternMatchingNode child = ((JetBrains.ReSharper.Psi.FSharp.IFunctionExpressionNode)param).FunctionDefinitionNode;
        TestPatternMatchingNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IPatternMatchingNode)child, "FunctionDefinitionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IFunctionExpressionNode)param).FunctionKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "FunctionKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IPatternMatching child = ((JetBrains.ReSharper.Psi.FSharp.IFunctionExpression)param).FunctionDefinition;
        TestPatternMatchingNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IPatternMatchingNode)child, "FunctionDefinition");
      }
    }
      internal static void TestFunctionTypeNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IFunctionTypeNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFunctionTypeNode)param).DomainNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "DomainNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFunctionTypeNode)param).RArrow;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RArrow");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFunctionTypeNode)param).RangeNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "RangeNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFunctionType)param).Domain;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "Domain");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IFunctionType)param).Range;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "Range");
      }
    }
      internal static void TestIdReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode)param).Identifier;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "Identifier");
      }
    }
      internal static void TestIdentifierNode (int level, JetBrains.ReSharper.Psi.FSharp.IIdentifierNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestIfStatementExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IIfStatementExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IIfStatementExpressionNode)param).ConditionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ConditionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IIfStatementExpressionNode)param).ElseKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "ElseKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IIfStatementExpressionNode)param).ElseStatementNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ElseStatementNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IIfStatementExpressionNode)param).IfKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "IfKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IIfStatementExpressionNode)param).ThenKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "ThenKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IIfStatementExpressionNode)param).ThenStatementNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ThenStatementNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IIfStatementExpression)param).Condition;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Condition");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IIfStatementExpression)param).ElseStatement;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ElseStatement");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IIfStatementExpression)param).ThenStatement;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ThenStatement");
      }
    }
      internal static void TestImplementationUnitNode (int level, JetBrains.ReSharper.Psi.FSharp.IImplementationUnitNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IDefinitionNode> children = ((JetBrains.ReSharper.Psi.FSharp.IImplementationUnitNode)param).DefinitionsNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IDefinitionNode child in children)
        TestDefinitionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IDefinitionNode)child, "DefinitionsNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IImplementationUnitNode)param).SemicolonSemicolon;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "SemicolonSemicolon");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IDefinition> children = ((JetBrains.ReSharper.Psi.FSharp.IImplementationUnit)param).Definitions;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IDefinition child in children)
        TestDefinitionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IDefinitionNode)child, "Definitions");
      }
    }
      internal static void TestInfixOperatorExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IInfixOperatorExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IInfixOperatorExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IInfixOperatorExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IInfixOperatorExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IInfixOperatorExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IInfixOperatorExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestInterfaceUnitNode (int level, JetBrains.ReSharper.Psi.FSharp.IInterfaceUnitNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.ISpecificationNode> children = ((JetBrains.ReSharper.Psi.FSharp.IInterfaceUnitNode)param).Declarations;
        foreach (JetBrains.ReSharper.Psi.FSharp.ISpecificationNode child in children)
        TestSpecificationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.ISpecificationNode)child, "Declarations");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IInterfaceUnitNode)param).SemicolonSemicolon;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "SemicolonSemicolon");
      }
    }
      internal static void TestLazyExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.ILazyExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ILazyExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ILazyExpressionNode)param).LazyKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LazyKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.ILazyExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
    }
      internal static void TestLazyTypeNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.ILazyTypeNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILazyTypeNode)param).LazyKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LazyKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILazyTypeNode)param).TypeExpressionNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILazyType)param).TypeExpression;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpression");
      }
    }
      internal static void TestLetDefinitionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode)param).AndKeyword;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "AndKeyword");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode)param).BindingSchemesNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode child in children)
        TestBindingSchemeNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)child, "BindingSchemesNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode)param).InlineKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "InlineKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode)param).LetKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LetKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode)param).RecKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RecKeyword");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IBindingScheme> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinition)param).BindingSchemes;
        foreach (JetBrains.ReSharper.Psi.FSharp.IBindingScheme child in children)
        TestBindingSchemeNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)child, "BindingSchemes");
      }
    }
      internal static void TestListConcatenateExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IListConcatenateExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IListConcatenateExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IListConcatenateExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IListConcatenateExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IListConcatenateExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IListConcatenateExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestListConstructorExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IListConstructorExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IListConstructorExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IListConstructorExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IListConstructorExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IListConstructorExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IListConstructorExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestListConstructorPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.IListConstructorPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IListConstructorPatternNode)param).ColonColon;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "ColonColon");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child = ((JetBrains.ReSharper.Psi.FSharp.IListConstructorPatternNode)param).HeadPatternNode;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "HeadPatternNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child = ((JetBrains.ReSharper.Psi.FSharp.IListConstructorPatternNode)param).TailPatternNode;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "TailPatternNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child = ((JetBrains.ReSharper.Psi.FSharp.IListConstructorPattern)param).HeadPattern;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "HeadPattern");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child = ((JetBrains.ReSharper.Psi.FSharp.IListConstructorPattern)param).TailPattern;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "TailPattern");
      }
    }
      internal static void TestLocalDeclarationsInExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.ILocalDeclarationsInExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILocalDeclarationsInExpressionNode)param).AndKeyword;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "AndKeyword");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILocalDeclarationsInExpressionNode)param).BindingsNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode child in children)
        TestBindingNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode)child, "BindingsNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILocalDeclarationsInExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILocalDeclarationsInExpressionNode)param).InKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "InKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILocalDeclarationsInExpressionNode)param).LetKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LetKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILocalDeclarationsInExpressionNode)param).RecKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RecKeyword");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IBinding> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILocalDeclarationsInExpression)param).Bindings;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IBinding child in children)
        TestBindingNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode)child, "Bindings");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ILocalDeclarationsInExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
    }
      internal static void TestMatchClauseNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClauseNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClauseNode)param).ConditionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ConditionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClauseNode)param).PatternNode;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "PatternNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClauseNode)param).RArrow;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RArrow");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClauseNode)param).TargetNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "TargetNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClauseNode)param).WhenKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "WhenKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClause)param).Condition;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Condition");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClause)param).Pattern;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Pattern");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClause)param).Target;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Target");
      }
    }
      internal static void TestMatchExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IMatchExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IMatchExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IMatchExpressionNode)param).MatchKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "MatchKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IPatternMatchingNode child = ((JetBrains.ReSharper.Psi.FSharp.IMatchExpressionNode)param).PatternMatchingNode;
        TestPatternMatchingNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IPatternMatchingNode)child, "PatternMatchingNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IMatchExpressionNode)param).WithKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "WithKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IMatchExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IPatternMatching child = ((JetBrains.ReSharper.Psi.FSharp.IMatchExpression)param).PatternMatching;
        TestPatternMatchingNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IPatternMatchingNode)child, "PatternMatching");
      }
    }
      internal static void TestMemberAccessExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IMemberAccessExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMemberAccessExpressionNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMemberAccessExpressionNode)param).QualifierNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "QualifierNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IValueReferenceExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMemberAccessExpressionNode)param).ReferenceNameNode;
        TestValueReferenceExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueReferenceExpressionNode)child, "ReferenceNameNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMemberAccessExpression)param).Qualifier;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Qualifier");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IValueReferenceExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMemberAccessExpression)param).ReferenceName;
        TestValueReferenceExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueReferenceExpressionNode)child, "ReferenceName");
      }
    }
      internal static void TestModuleReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)param).QualifierNode;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "QualifierNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)param).ReferenceName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "ReferenceName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReference child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReference)param).Qualifier;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "Qualifier");
      }
    }
      internal static void TestModuleReferenceListNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceListNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceListNode)param).Dot;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceOldNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceListNode)param).ReferenceNameNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceOldNode child in children)
        TestModuleReferenceOldNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceOldNode)child, "ReferenceNameNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceOld> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceList)param).ReferenceName;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceOld child in children)
        TestModuleReferenceOldNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceOldNode)child, "ReferenceName");
      }
    }
      internal static void TestModuleReferenceOldNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceOldNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceOldNode)param).Identifier;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "Identifier");
      }
    }
      internal static void TestMultiParameterTypeReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReferenceNode)param).Comma;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Comma");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReferenceNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReferenceNode)param).ParametersNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child in children)
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "ParametersNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReferenceNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReferenceNode)param).TypeReferenceNode;
        TestTypeReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)child, "TypeReferenceNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReference)param).Parameters;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child in children)
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "Parameters");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReference)param).TypeReference;
        TestTypeReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)child, "TypeReference");
      }
    }
      internal static void TestMultipleMatchingNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatchingNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatchingNode)param).ConditionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ConditionNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatchingNode)param).ParametersNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child in children)
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "ParametersNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatchingNode)param).RArrow;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RArrow");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatchingNode)param).TargetNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "TargetNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatchingNode)param).WhenKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "WhenKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatching)param).Condition;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Condition");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPattern> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatching)param).Parameters;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child in children)
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Parameters");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatching)param).Target;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Target");
      }
    }
      internal static void TestMutableBindingValueNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IMutableBindingValueNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMutableBindingValueNode)param).MutableKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "MutableKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMutableBindingValueNode)param).ValueName;
        TestValueNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode)child, "ValueName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinition child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IMutableBindingValue)param).ContainingLetDefinition;
        TestLetDefinitionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode)child, "ContainingLetDefinition");
      }
    }
      internal static void TestOneParameterTypeReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IOneParameterTypeReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IOneParameterTypeReferenceNode)param).ParameterNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "ParameterNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IOneParameterTypeReferenceNode)param).TypeReferenceNode;
        TestTypeReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)child, "TypeReferenceNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IOneParameterTypeReference)param).Parameter;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "Parameter");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IOneParameterTypeReference)param).TypeReference;
        TestTypeReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)child, "TypeReference");
      }
    }
      internal static void TestOpenModuleDefinitionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IOpenModuleDefinitionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IOpenModuleDefinitionNode)param).OpenKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OpenKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IOpenModuleDefinitionNode)param).UsingNode;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "UsingNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReference child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IOpenModuleDefinition)param).Using;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "Using");
      }
    }
      internal static void TestOperatorExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IOperatorExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.IUnaryExpressionNode) TestUnaryExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IUnaryExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IBinaryExpressionNode) TestBinaryExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IBinaryExpressionNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestOperatorNameNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IOperatorNameNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IOperatorNameNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IOperatorNameNode)param).Operator;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Operator");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IOperatorNameNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
    }
      internal static void TestOrExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IOrExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IOrExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IOrExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IOrExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IOrExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IOrExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestParameterizedConstructorPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IParameterizedConstructorPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IParameterizedConstructorPatternNode)param).ConstructorReferenceNode;
        TestConstructorReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorReferenceNode)child, "ConstructorReferenceNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IParameterizedConstructorPatternNode)param).ParameterNode;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "ParameterNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorReference child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IParameterizedConstructorPattern)param).ConstructorReference;
        TestConstructorReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorReferenceNode)child, "ConstructorReference");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IParameterizedConstructorPattern)param).Parameter;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Parameter");
      }
    }
      internal static void TestParameterizedTypeReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IParameterizedTypeReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IOneParameterTypeReferenceNode) TestOneParameterTypeReferenceNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IOneParameterTypeReferenceNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReferenceNode) TestMultiParameterTypeReferenceNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReferenceNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IWithoutParameterTypeReferenceNode) TestWithoutParameterTypeReferenceNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IWithoutParameterTypeReferenceNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestParenthesizedExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IParenthesizedExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedExpressionNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedExpressionNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
    }
      internal static void TestParenthesizedFieldValueExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IParenthesizedFieldValueExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedFieldValueExpressionNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedFieldValueExpressionNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedFieldValueExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedFieldValueExpressionNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedFieldValueExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedFieldValueExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedFieldValueExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestParenthesizedPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.IParenthesizedPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedPatternNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedPatternNode)param).PatternNode;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "PatternNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedPatternNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child = ((JetBrains.ReSharper.Psi.FSharp.IParenthesizedPattern)param).Pattern;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Pattern");
      }
    }
      internal static void TestParenthesizedTypeNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IParenthesizedTypeNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IParenthesizedTypeNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IParenthesizedTypeNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IParenthesizedTypeNode)param).TypeExpressionNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IParenthesizedType)param).TypeExpression;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpression");
      }
    }
      internal static void TestPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IAsValuePatternNode) TestAsValuePatternNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IAsValuePatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IDisjunctionPatternNode) TestDisjunctionPatternNode (level, (JetBrains.ReSharper.Psi.FSharp.IDisjunctionPatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IListConstructorPatternNode) TestListConstructorPatternNode (level, (JetBrains.ReSharper.Psi.FSharp.IListConstructorPatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.ITuplePatternNode) TestTuplePatternNode (level, (JetBrains.ReSharper.Psi.FSharp.ITuplePatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IBracketedPatternNode) TestBracketedPatternNode (level, (JetBrains.ReSharper.Psi.FSharp.IBracketedPatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IArrayPatternNode) TestArrayPatternNode (level, (JetBrains.ReSharper.Psi.FSharp.IArrayPatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IRecordPatternNode) TestRecordPatternNode (level, (JetBrains.ReSharper.Psi.FSharp.IRecordPatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IParenthesizedPatternNode) TestParenthesizedPatternNode (level, (JetBrains.ReSharper.Psi.FSharp.IParenthesizedPatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.ITypedPatternNode) TestTypedPatternNode (level, (JetBrains.ReSharper.Psi.FSharp.ITypedPatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IUnderlinePatternNode) TestUnderlinePatternNode (level, (JetBrains.ReSharper.Psi.FSharp.IUnderlinePatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IParameterizedConstructorPatternNode) TestParameterizedConstructorPatternNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IParameterizedConstructorPatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorReferenceNode) TestConstructorReferenceNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorReferenceNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IValueDeclarationPatternNode) TestValueDeclarationPatternNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueDeclarationPatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IConstantPatternNode) TestConstantPatternNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IConstantPatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IRangePatternNode) TestRangePatternNode (level, (JetBrains.ReSharper.Psi.FSharp.IRangePatternNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.ITypeTestPatternNode) TestTypeTestPatternNode (level, (JetBrains.ReSharper.Psi.FSharp.ITypeTestPatternNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestPatternMatchingNode (int level, JetBrains.ReSharper.Psi.FSharp.IPatternMatchingNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClauseNode> children = ((JetBrains.ReSharper.Psi.FSharp.IPatternMatchingNode)param).ClausesNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClauseNode child in children)
        TestMatchClauseNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClauseNode)child, "ClausesNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IPatternMatchingNode)param).Or;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Or");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClause> children = ((JetBrains.ReSharper.Psi.FSharp.IPatternMatching)param).Clauses;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClause child in children)
        TestMatchClauseNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClauseNode)child, "Clauses");
      }
    }
      internal static void TestPrefixOperatorExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IPrefixOperatorExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IPrefixOperatorExpressionNode)param).OperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "OperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IPrefixOperatorExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IPrefixOperatorExpression)param).Operand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Operand");
      }
    }
      internal static void TestQualifiedIdReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.IQualifiedIdReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.IQualifiedIdReferenceNode)param).Dot;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode> children = ((JetBrains.ReSharper.Psi.FSharp.IQualifiedIdReferenceNode)param).ReferencesNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode child in children)
        TestIdReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode)child, "ReferencesNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference> children = ((JetBrains.ReSharper.Psi.FSharp.IQualifiedIdReference)param).References;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference child in children)
        TestIdReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode)child, "References");
      }
    }
      internal static void TestQualifiedIdentifierNameNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode)param).IdentifierName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "IdentifierName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode)param).QualifierNode;
        TestQualifiedIdentifierNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode)child, "QualifierNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierName child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierName)param).Qualifier;
        TestQualifiedIdentifierNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode)child, "Qualifier");
      }
    }
      internal static void TestQualifiedValueNameNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueNameNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueNameNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueNameNode)param).QualifierNode;
        TestQualifiedIdentifierNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode)child, "QualifierNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueNameNode)param).ValueName;
        TestValueNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode)child, "ValueName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierName child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueName)param).Qualifier;
        TestQualifiedIdentifierNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierNameNode)child, "Qualifier");
      }
    }
      internal static void TestQualifiedValueReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueNameNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueReferenceNode)param).ReferenceValueNode;
        TestQualifiedValueNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueNameNode)child, "ReferenceValueNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueName child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueReference)param).ReferenceValue;
        TestQualifiedValueNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueNameNode)child, "ReferenceValue");
      }
    }
      internal static void TestRangePatternNode (int level, JetBrains.ReSharper.Psi.FSharp.IRangePatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IRangePatternNode)param).DotDot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "DotDot");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IRangePatternNode)param).LowerBound;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LowerBound");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IRangePatternNode)param).UpperBound;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "UpperBound");
      }
    }
      internal static void TestRecordExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IRecordExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IRecordExpressionNode)param).LBrace;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBrace");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IRecordExpressionNode)param).RBrace;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RBrace");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentListNode child = ((JetBrains.ReSharper.Psi.FSharp.IRecordExpressionNode)param).fieldAssignmentList;
        TestFieldAssignmentListNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentListNode)child, "fieldAssignmentList");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IFieldAssignment> children = ((JetBrains.ReSharper.Psi.FSharp.IRecordExpression)param).FieldAssignments;
        foreach (JetBrains.ReSharper.Psi.FSharp.IFieldAssignment child in children)
        TestFieldAssignmentNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentNode)child, "FieldAssignments");
      }
    }
      internal static void TestRecordPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.IRecordPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.IFieldPatternListNode child = ((JetBrains.ReSharper.Psi.FSharp.IRecordPatternNode)param).FieldPatternList;
        TestFieldPatternListNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IFieldPatternListNode)child, "FieldPatternList");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IRecordPatternNode)param).LBrace;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBrace");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IRecordPatternNode)param).RBrace;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RBrace");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IFieldPattern> children = ((JetBrains.ReSharper.Psi.FSharp.IRecordPattern)param).FieldPatterns;
        foreach (JetBrains.ReSharper.Psi.FSharp.IFieldPattern child in children)
        TestFieldPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IFieldPatternNode)child, "FieldPatterns");
      }
    }
      internal static void TestRecordTypeRepresentationNode (int level, JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentationNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode child = ((JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentationNode)param).FieldDeclarationListNode;
        TestFieldDeclarationListNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode)child, "FieldDeclarationListNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentationNode)param).LBrace;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBrace");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentationNode)param).RBrace;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RBrace");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationList child = ((JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentation)param).FieldDeclarationList;
        TestFieldDeclarationListNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode)child, "FieldDeclarationList");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration> children = ((JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentation)param).FieldDeclarations;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration child in children)
        TestFieldDeclarationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclarationNode)child, "FieldDeclarations");
      }
    }
      internal static void TestSpecificationNode (int level, JetBrains.ReSharper.Psi.FSharp.ISpecificationNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IValueSpecificationNode) TestValueSpecificationNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueSpecificationNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDefinitionNode) TestTypeDefinitionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDefinitionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDefinitionNode) TestExceptionDefinitionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDefinitionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IOpenModuleDefinitionNode) TestOpenModuleDefinitionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IOpenModuleDefinitionNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestStringConcatenateExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IStringConcatenateExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IStringConcatenateExpressionNode)param).LeftOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IStringConcatenateExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IStringConcatenateExpressionNode)param).RightOperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperandNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IStringConcatenateExpression)param).LeftOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "LeftOperand");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IStringConcatenateExpression)param).RightOperand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "RightOperand");
      }
    }
      internal static void TestTryFinallyExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.ITryFinallyExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ITryFinallyExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ITryFinallyExpressionNode)param).FinallyExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "FinallyExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITryFinallyExpressionNode)param).FinallyKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "FinallyKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITryFinallyExpressionNode)param).TryKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "TryKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.ITryFinallyExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.ITryFinallyExpression)param).FinallyExpression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "FinallyExpression");
      }
    }
      internal static void TestTryWithExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.ITryWithExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ITryWithExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IPatternMatchingNode child = ((JetBrains.ReSharper.Psi.FSharp.ITryWithExpressionNode)param).PatternMatchingNode;
        TestPatternMatchingNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IPatternMatchingNode)child, "PatternMatchingNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITryWithExpressionNode)param).TryKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "TryKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITryWithExpressionNode)param).WithKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "WithKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.ITryWithExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IPatternMatching child = ((JetBrains.ReSharper.Psi.FSharp.ITryWithExpression)param).PatternMatching;
        TestPatternMatchingNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IPatternMatchingNode)child, "PatternMatching");
      }
    }
      internal static void TestTupleExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)param).Comma;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Comma");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode> children = ((JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)param).ExpressionNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child in children)
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IExpression> children = ((JetBrains.ReSharper.Psi.FSharp.ITupleExpression)param).Expression;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child in children)
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
    }
      internal static void TestTuplePatternNode (int level, JetBrains.ReSharper.Psi.FSharp.ITuplePatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.ITuplePatternNode)param).Comma;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Comma");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode> children = ((JetBrains.ReSharper.Psi.FSharp.ITuplePatternNode)param).PatternNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child in children)
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "PatternNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPattern> children = ((JetBrains.ReSharper.Psi.FSharp.ITuplePattern)param).Pattern;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child in children)
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Pattern");
      }
    }
      internal static void TestTupleTypeNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.ITupleTypeNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITupleTypeNode)param).Asterisk;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Asterisk");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITupleTypeNode)param).TypeExpressionNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child in children)
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITupleType)param).TypeExpression;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child in children)
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpression");
      }
    }
      internal static void TestTypeDeclarationNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclarationNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclarationNode)param).Eq;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Eq");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.ITypeInformationNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclarationNode)param).TypeInformationNode;
        TestTypeInformationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.ITypeInformationNode)child, "TypeInformationNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclarationNode)param).TypeName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "TypeName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.ITypeParameterListNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclarationNode)param).TypeParameterList;
        TestTypeParameterListNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.ITypeParameterListNode)child, "TypeParameterList");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.ITypeInformation child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclaration)param).TypeInformation;
        TestTypeInformationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.ITypeInformationNode)child, "TypeInformation");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclaration> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclaration)param).TypeParameters;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclaration child in children)
        TestTypeParameterDeclarationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode)child, "TypeParameters");
      }
    }
      internal static void TestTypeDefinitionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDefinitionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDefinitionNode)param).AndKeyword;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "AndKeyword");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclarationNode> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDefinitionNode)param).TypeDeclarationsNode;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclarationNode child in children)
        TestTypeDeclarationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclarationNode)child, "TypeDeclarationsNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDefinitionNode)param).TypeKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "TypeKeyword");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclaration> children = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDefinition)param).TypeDeclarations;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclaration child in children)
        TestTypeDeclarationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclarationNode)child, "TypeDeclarations");
      }
    }
      internal static void TestTypeExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IFunctionTypeNode) TestFunctionTypeNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IFunctionTypeNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.ITupleTypeNode) TestTupleTypeNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.ITupleTypeNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IArrayTypeNode) TestArrayTypeNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IArrayTypeNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.ILazyTypeNode) TestLazyTypeNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.ILazyTypeNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterReferenceNode) TestTypeParameterReferenceNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterReferenceNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IUnderlineTypeNode) TestUnderlineTypeNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IUnderlineTypeNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IParenthesizedTypeNode) TestParenthesizedTypeNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IParenthesizedTypeNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IOneParameterTypeReferenceNode) TestOneParameterTypeReferenceNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IOneParameterTypeReferenceNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReferenceNode) TestMultiParameterTypeReferenceNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReferenceNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IWithoutParameterTypeReferenceNode) TestWithoutParameterTypeReferenceNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IWithoutParameterTypeReferenceNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestTypeInformationNode (int level, JetBrains.ReSharper.Psi.FSharp.ITypeInformationNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.ITypeRepresentationNode) TestTypeRepresentationNode (level, (JetBrains.ReSharper.Psi.FSharp.ITypeRepresentationNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode) TestTypeExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.ITypeRefOrConstructorDeclNode) TestTypeRefOrConstructorDeclNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeRefOrConstructorDeclNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestTypeParameterDeclarationNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode)param).Apostrophe;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Apostrophe");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode)param).Dollar;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dollar");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode)param).ParameterName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "ParameterName");
      }
    }
      internal static void TestTypeParameterListNode (int level, JetBrains.ReSharper.Psi.FSharp.ITypeParameterListNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> children = ((JetBrains.ReSharper.Psi.FSharp.ITypeParameterListNode)param).Comma;
        foreach (JetBrains.ReSharper.Psi.ITokenNode child in children)
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Comma");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypeParameterListNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode> children = ((JetBrains.ReSharper.Psi.FSharp.ITypeParameterListNode)param).ParameterDeclarations;
        foreach (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode child in children)
        TestTypeParameterDeclarationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode)child, "ParameterDeclarations");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypeParameterListNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
    }
      internal static void TestTypeParameterReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterReferenceNode)param).Apostrophe;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Apostrophe");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterReferenceNode)param).Dollar;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dollar");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterReferenceNode)param).ParameterName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "ParameterName");
      }
    }
      internal static void TestTypeRefOrConstructorDeclNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeRefOrConstructorDeclNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeRefOrConstructorDeclNode)param).Name;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "Name");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclaration child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeRefOrConstructorDecl)param).TypeDeclaration;
        TestTypeDeclarationNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclarationNode)child, "TypeDeclaration");
      }
    }
      internal static void TestTypeReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)param).QualifierNode;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "QualifierNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IIdentifierNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)param).ReferenceName;
        TestIdentifierNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)child, "ReferenceName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReference child = ((JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)param).Qualifier;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "Qualifier");
      }
    }
      internal static void TestTypeRepresentationNode (int level, JetBrains.ReSharper.Psi.FSharp.ITypeRepresentationNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.IAlgebraicTypeRepresentationNode) TestAlgebraicTypeRepresentationNode (level, (JetBrains.ReSharper.Psi.FSharp.IAlgebraicTypeRepresentationNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentationNode) TestRecordTypeRepresentationNode (level, (JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentationNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestTypeSchemeExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.ITypeSchemeExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode) TestTypeExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IForAllTypeExpressionNode) TestForAllTypeExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IForAllTypeExpressionNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestTypeTestExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.ITypeTestExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypeTestExpressionNode)param).ColonQuest;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "ColonQuest");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypeTestExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypeTestExpressionNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypeTestExpressionNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypeTestExpressionNode)param).TypeNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.ITypeTestExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.ITypeTestExpression)param).Type;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "Type");
      }
    }
      internal static void TestTypeTestPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.ITypeTestPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypeTestPatternNode)param).Colonquest;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Colonquest");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypeTestPatternNode)param).TypeExpression;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpression");
      }
    }
      internal static void TestTypedExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.ITypedExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypedExpressionNode)param).Colon;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Colon");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypedExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypedExpressionNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypedExpressionNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypedExpressionNode)param).TypeExpressionNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.ITypedExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.ITypedExpression)param).TypeExpression;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpression");
      }
    }
      internal static void TestTypedPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.ITypedPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypedPatternNode)param).Colon;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Colon");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypedPatternNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypedPatternNode)param).PatternNode;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "PatternNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypedPatternNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.ITypedPatternNode)param).TypeExpressionNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IPattern child = ((JetBrains.ReSharper.Psi.FSharp.ITypedPattern)param).Pattern;
        TestPatternNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)child, "Pattern");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.ITypedPattern)param).TypeExpression;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpression");
      }
    }
      internal static void TestUnaryExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IUnaryExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.IUnaryMinusExpressionNode) TestUnaryMinusExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IUnaryMinusExpressionNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IPrefixOperatorExpressionNode) TestPrefixOperatorExpressionNode (level, (JetBrains.ReSharper.Psi.FSharp.IPrefixOperatorExpressionNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestUnaryMinusExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IUnaryMinusExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IUnaryMinusExpressionNode)param).OperandNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "OperandNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IUnaryMinusExpressionNode)param).OperationSign;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "OperationSign");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IUnaryMinusExpression)param).Operand;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Operand");
      }
    }
      internal static void TestUnderlinePatternNode (int level, JetBrains.ReSharper.Psi.FSharp.IUnderlinePatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IUnderlinePatternNode)param).Underline;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Underline");
      }
    }
      internal static void TestUnderlineTypeNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IUnderlineTypeNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IUnderlineTypeNode)param).Underline;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Underline");
      }
    }
      internal static void TestUnitNode (int level, JetBrains.ReSharper.Psi.FSharp.IUnitNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IUnitNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IUnitNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
    }
      internal static void TestUpcastExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionNode)param).UpcastKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "UpcastKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IUpcastExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
    }
      internal static void TestUpcastExpressionToTypeNode (int level, JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionToTypeNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionToTypeNode)param).ColonGT;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "ColonGT");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionToTypeNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionToTypeNode)param).LParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LParenth");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionToTypeNode)param).RParenth;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RParenth");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionToTypeNode)param).TypeNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionToType)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionToType)param).Type;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "Type");
      }
    }
      internal static void TestValueDeclarationPatternNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IValueDeclarationPatternNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IValueDeclarationPatternNode)param).Value;
        TestValueNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode)child, "Value");
      }
    }
      internal static void TestValueNameNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.IIdentifierNode) TestIdentifierNode (level, (JetBrains.ReSharper.Psi.FSharp.IIdentifierNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IOperatorNameNode) TestOperatorNameNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IOperatorNameNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestValueReferenceExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IValueReferenceExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IValueReferenceExpressionNode)param).Dot;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Dot");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IValueReferenceExpressionNode)param).QualifierNode;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "QualifierNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IValueReferenceExpressionNode)param).ReferenceName;
        TestValueNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode)child, "ReferenceName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReference child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IValueReferenceExpression)param).Qualifier;
        TestModuleReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceNode)child, "Qualifier");
      }
    }
      internal static void TestValueReferenceExpressionOldNode (int level, JetBrains.ReSharper.Psi.FSharp.IValueReferenceExpressionOldNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      if (param is JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueReferenceNode) TestQualifiedValueReferenceNode (level, (JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueReferenceNode)param, caller);
      else if (param is JetBrains.ReSharper.Psi.FSharp.IQualifiedIdReferenceNode) TestQualifiedIdReferenceNode (level, (JetBrains.ReSharper.Psi.FSharp.IQualifiedIdReferenceNode)param, caller);
      else throw new System.InvalidOperationException();
    }
      internal static void TestValueSpecificationNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IValueSpecificationNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IValueSpecificationNode)param).Colon;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "Colon");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IValueSpecificationNode)param).TypeExpressionNode;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IValueSpecificationNode)param).ValKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "ValKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IValueSpecificationNode)param).ValueName;
        TestValueNameNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode)child, "ValueName");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IValueSpecification)param).TypeExpression;
        TestTypeExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)child, "TypeExpression");
      }
    }
      internal static void TestWhileStatementExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IWhileStatementExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IWhileStatementExpressionNode)param).BodyNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "BodyNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IWhileStatementExpressionNode)param).ConditionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ConditionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IWhileStatementExpressionNode)param).DoKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "DoKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IWhileStatementExpressionNode)param).DoneKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "DoneKeyword");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IWhileStatementExpressionNode)param).WhileKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "WhileKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IWhileStatementExpression)param).Body;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Body");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IWhileStatementExpression)param).Condition;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Condition");
      }
    }
      internal static void TestWithRecordExpressionNode (int level, JetBrains.ReSharper.Psi.FSharp.IWithRecordExpressionNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode child = ((JetBrains.ReSharper.Psi.FSharp.IWithRecordExpressionNode)param).ExpressionNode;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "ExpressionNode");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IWithRecordExpressionNode)param).LBrace;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "LBrace");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IWithRecordExpressionNode)param).RBrace;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "RBrace");
      }
      {
        JetBrains.ReSharper.Psi.ITokenNode child = ((JetBrains.ReSharper.Psi.FSharp.IWithRecordExpressionNode)param).WithKeyword;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.ITokenNode)child, "WithKeyword");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentListNode child = ((JetBrains.ReSharper.Psi.FSharp.IWithRecordExpressionNode)param).fieldAssignmentList;
        TestFieldAssignmentListNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentListNode)child, "fieldAssignmentList");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.IExpression child = ((JetBrains.ReSharper.Psi.FSharp.IWithRecordExpression)param).Expression;
        TestExpressionNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)child, "Expression");
      }
      {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IFieldAssignment> children = ((JetBrains.ReSharper.Psi.FSharp.IWithRecordExpression)param).FieldAssignments;
        foreach (JetBrains.ReSharper.Psi.FSharp.IFieldAssignment child in children)
        TestFieldAssignmentNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentNode)child, "FieldAssignments");
      }
    }
      internal static void TestWithoutParameterTypeReferenceNode (int level, JetBrains.ReSharper.Psi.FSharp.Tree.IWithoutParameterTypeReferenceNode param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IWithoutParameterTypeReferenceNode)param).TypeReferenceNode;
        TestTypeReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)child, "TypeReferenceNode");
      }
      {
        JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference child = ((JetBrains.ReSharper.Psi.FSharp.Tree.IWithoutParameterTypeReference)param).TypeReference;
        TestTypeReferenceNode (level + 1, (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)child, "TypeReference");
      }
    }
    }
}
