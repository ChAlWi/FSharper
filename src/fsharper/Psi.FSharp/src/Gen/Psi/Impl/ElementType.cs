//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  public abstract class ElementType {
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ERROR_ELEMENT = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ErrorElement.NODE_TYPE;
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType _F_SHARP_FILE = _F_SHARP_FILE_INTERNAL.INSTANCE;
    private class _F_SHARP_FILE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly _F_SHARP_FILE_INTERNAL INSTANCE = new _F_SHARP_FILE_INTERNAL ();
      _F_SHARP_FILE_INTERNAL() : base("_F_SHARP_FILE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpFile();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ALGEBRAIC_TYPE_REPRESENTATION = ALGEBRAIC_TYPE_REPRESENTATION_INTERNAL.INSTANCE;
    private class ALGEBRAIC_TYPE_REPRESENTATION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly ALGEBRAIC_TYPE_REPRESENTATION_INTERNAL INSTANCE = new ALGEBRAIC_TYPE_REPRESENTATION_INTERNAL ();
      ALGEBRAIC_TYPE_REPRESENTATION_INTERNAL() : base("ALGEBRAIC_TYPE_REPRESENTATION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new AlgebraicTypeRepresentation();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType AND_EXPRESSION = AND_EXPRESSION_INTERNAL.INSTANCE;
    private class AND_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly AND_EXPRESSION_INTERNAL INSTANCE = new AND_EXPRESSION_INTERNAL ();
      AND_EXPRESSION_INTERNAL() : base("AND_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new AndExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType APPLICATION_EXPRESSION = APPLICATION_EXPRESSION_INTERNAL.INSTANCE;
    private class APPLICATION_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly APPLICATION_EXPRESSION_INTERNAL INSTANCE = new APPLICATION_EXPRESSION_INTERNAL ();
      APPLICATION_EXPRESSION_INTERNAL() : base("APPLICATION_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ApplicationExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ARRAY_EXPRESSION = ARRAY_EXPRESSION_INTERNAL.INSTANCE;
    private class ARRAY_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly ARRAY_EXPRESSION_INTERNAL INSTANCE = new ARRAY_EXPRESSION_INTERNAL ();
      ARRAY_EXPRESSION_INTERNAL() : base("ARRAY_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ArrayExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ARRAY_PATTERN = ARRAY_PATTERN_INTERNAL.INSTANCE;
    private class ARRAY_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly ARRAY_PATTERN_INTERNAL INSTANCE = new ARRAY_PATTERN_INTERNAL ();
      ARRAY_PATTERN_INTERNAL() : base("ARRAY_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ArrayPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ARRAY_TYPE = ARRAY_TYPE_INTERNAL.INSTANCE;
    private class ARRAY_TYPE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly ARRAY_TYPE_INTERNAL INSTANCE = new ARRAY_TYPE_INTERNAL ();
      ARRAY_TYPE_INTERNAL() : base("ARRAY_TYPE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ArrayType();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType AS_VALUE_PATTERN = AS_VALUE_PATTERN_INTERNAL.INSTANCE;
    private class AS_VALUE_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly AS_VALUE_PATTERN_INTERNAL INSTANCE = new AS_VALUE_PATTERN_INTERNAL ();
      AS_VALUE_PATTERN_INTERNAL() : base("AS_VALUE_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.AsValuePattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ASSERT_EXPRESSION = ASSERT_EXPRESSION_INTERNAL.INSTANCE;
    private class ASSERT_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly ASSERT_EXPRESSION_INTERNAL INSTANCE = new ASSERT_EXPRESSION_INTERNAL ();
      ASSERT_EXPRESSION_INTERNAL() : base("ASSERT_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new AssertExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ASSIGN_EXPRESSION = ASSIGN_EXPRESSION_INTERNAL.INSTANCE;
    private class ASSIGN_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly ASSIGN_EXPRESSION_INTERNAL INSTANCE = new ASSIGN_EXPRESSION_INTERNAL ();
      ASSIGN_EXPRESSION_INTERNAL() : base("ASSIGN_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new AssignExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ASSIGN_FIELD_EXPRESSION = ASSIGN_FIELD_EXPRESSION_INTERNAL.INSTANCE;
    private class ASSIGN_FIELD_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly ASSIGN_FIELD_EXPRESSION_INTERNAL INSTANCE = new ASSIGN_FIELD_EXPRESSION_INTERNAL ();
      ASSIGN_FIELD_EXPRESSION_INTERNAL() : base("ASSIGN_FIELD_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new AssignFieldExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ATTRIBUTE = ATTRIBUTE_INTERNAL.INSTANCE;
    private class ATTRIBUTE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly ATTRIBUTE_INTERNAL INSTANCE = new ATTRIBUTE_INTERNAL ();
      ATTRIBUTE_INTERNAL() : base("ATTRIBUTE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new Attribute();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ATTRIBUTE_REFERENCE = ATTRIBUTE_REFERENCE_INTERNAL.INSTANCE;
    private class ATTRIBUTE_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly ATTRIBUTE_REFERENCE_INTERNAL INSTANCE = new ATTRIBUTE_REFERENCE_INTERNAL ();
      ATTRIBUTE_REFERENCE_INTERNAL() : base("ATTRIBUTE_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new AttributeReference();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BINARY_ADD_EXPRESSION = BINARY_ADD_EXPRESSION_INTERNAL.INSTANCE;
    private class BINARY_ADD_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly BINARY_ADD_EXPRESSION_INTERNAL INSTANCE = new BINARY_ADD_EXPRESSION_INTERNAL ();
      BINARY_ADD_EXPRESSION_INTERNAL() : base("BINARY_ADD_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new BinaryAddExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BINARY_MULT_EXPRESSION = BINARY_MULT_EXPRESSION_INTERNAL.INSTANCE;
    private class BINARY_MULT_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly BINARY_MULT_EXPRESSION_INTERNAL INSTANCE = new BINARY_MULT_EXPRESSION_INTERNAL ();
      BINARY_MULT_EXPRESSION_INTERNAL() : base("BINARY_MULT_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new BinaryMultExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BINARY_POWER_EXPRESSION = BINARY_POWER_EXPRESSION_INTERNAL.INSTANCE;
    private class BINARY_POWER_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly BINARY_POWER_EXPRESSION_INTERNAL INSTANCE = new BINARY_POWER_EXPRESSION_INTERNAL ();
      BINARY_POWER_EXPRESSION_INTERNAL() : base("BINARY_POWER_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new BinaryPowerExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BINDING = BINDING_INTERNAL.INSTANCE;
    private class BINDING_INTERNAL : $elementTypeBaseClass
    {
      public static readonly BINDING_INTERNAL INSTANCE = new BINDING_INTERNAL ();
      BINDING_INTERNAL() : base("BINDING") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.Binding();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BINDING_PATTERN = BINDING_PATTERN_INTERNAL.INSTANCE;
    private class BINDING_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly BINDING_PATTERN_INTERNAL INSTANCE = new BINDING_PATTERN_INTERNAL ();
      BINDING_PATTERN_INTERNAL() : base("BINDING_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new BindingPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BINDING_VALUE = BINDING_VALUE_INTERNAL.INSTANCE;
    private class BINDING_VALUE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly BINDING_VALUE_INTERNAL INSTANCE = new BINDING_VALUE_INTERNAL ();
      BINDING_VALUE_INTERNAL() : base("BINDING_VALUE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.BindingValue();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BRACKETED_EXPRESSION = BRACKETED_EXPRESSION_INTERNAL.INSTANCE;
    private class BRACKETED_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly BRACKETED_EXPRESSION_INTERNAL INSTANCE = new BRACKETED_EXPRESSION_INTERNAL ();
      BRACKETED_EXPRESSION_INTERNAL() : base("BRACKETED_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new BracketedExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BRACKETED_FIELD_VALUE_EXPRESSION = BRACKETED_FIELD_VALUE_EXPRESSION_INTERNAL.INSTANCE;
    private class BRACKETED_FIELD_VALUE_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly BRACKETED_FIELD_VALUE_EXPRESSION_INTERNAL INSTANCE = new BRACKETED_FIELD_VALUE_EXPRESSION_INTERNAL ();
      BRACKETED_FIELD_VALUE_EXPRESSION_INTERNAL() : base("BRACKETED_FIELD_VALUE_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new BracketedFieldValueExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BRACKETED_PATTERN = BRACKETED_PATTERN_INTERNAL.INSTANCE;
    private class BRACKETED_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly BRACKETED_PATTERN_INTERNAL INSTANCE = new BRACKETED_PATTERN_INTERNAL ();
      BRACKETED_PATTERN_INTERNAL() : base("BRACKETED_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new BracketedPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType COMPARISON_EXPRESSION = COMPARISON_EXPRESSION_INTERNAL.INSTANCE;
    private class COMPARISON_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly COMPARISON_EXPRESSION_INTERNAL INSTANCE = new COMPARISON_EXPRESSION_INTERNAL ();
      COMPARISON_EXPRESSION_INTERNAL() : base("COMPARISON_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ComparisonExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONSTANT_EXPRESSION = CONSTANT_EXPRESSION_INTERNAL.INSTANCE;
    private class CONSTANT_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly CONSTANT_EXPRESSION_INTERNAL INSTANCE = new CONSTANT_EXPRESSION_INTERNAL ();
      CONSTANT_EXPRESSION_INTERNAL() : base("CONSTANT_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ConstantExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONSTANT_PATTERN = CONSTANT_PATTERN_INTERNAL.INSTANCE;
    private class CONSTANT_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly CONSTANT_PATTERN_INTERNAL INSTANCE = new CONSTANT_PATTERN_INTERNAL ();
      CONSTANT_PATTERN_INTERNAL() : base("CONSTANT_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ConstantPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONSTRUCTOR_DECLARATION = CONSTRUCTOR_DECLARATION_INTERNAL.INSTANCE;
    private class CONSTRUCTOR_DECLARATION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly CONSTRUCTOR_DECLARATION_INTERNAL INSTANCE = new CONSTRUCTOR_DECLARATION_INTERNAL ();
      CONSTRUCTOR_DECLARATION_INTERNAL() : base("CONSTRUCTOR_DECLARATION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ConstructorDeclaration();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONSTRUCTOR_REFERENCE = CONSTRUCTOR_REFERENCE_INTERNAL.INSTANCE;
    private class CONSTRUCTOR_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly CONSTRUCTOR_REFERENCE_INTERNAL INSTANCE = new CONSTRUCTOR_REFERENCE_INTERNAL ();
      CONSTRUCTOR_REFERENCE_INTERNAL() : base("CONSTRUCTOR_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ConstructorReference();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CREATION_EXPRESSION = CREATION_EXPRESSION_INTERNAL.INSTANCE;
    private class CREATION_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly CREATION_EXPRESSION_INTERNAL INSTANCE = new CREATION_EXPRESSION_INTERNAL ();
      CREATION_EXPRESSION_INTERNAL() : base("CREATION_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new CreationExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CREATION_WITH_OVERRIDING_METHODS_EXPRESSION = CREATION_WITH_OVERRIDING_METHODS_EXPRESSION_INTERNAL.INSTANCE;
    private class CREATION_WITH_OVERRIDING_METHODS_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly CREATION_WITH_OVERRIDING_METHODS_EXPRESSION_INTERNAL INSTANCE = new CREATION_WITH_OVERRIDING_METHODS_EXPRESSION_INTERNAL ();
      CREATION_WITH_OVERRIDING_METHODS_EXPRESSION_INTERNAL() : base("CREATION_WITH_OVERRIDING_METHODS_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new CreationWithOverridingMethodsExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DISJUNCTION_PATTERN = DISJUNCTION_PATTERN_INTERNAL.INSTANCE;
    private class DISJUNCTION_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly DISJUNCTION_PATTERN_INTERNAL INSTANCE = new DISJUNCTION_PATTERN_INTERNAL ();
      DISJUNCTION_PATTERN_INTERNAL() : base("DISJUNCTION_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new DisjunctionPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DO_EXPRESSION = DO_EXPRESSION_INTERNAL.INSTANCE;
    private class DO_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly DO_EXPRESSION_INTERNAL INSTANCE = new DO_EXPRESSION_INTERNAL ();
      DO_EXPRESSION_INTERNAL() : base("DO_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new DoExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DO_EXPRESSION_DEFINITION = DO_EXPRESSION_DEFINITION_INTERNAL.INSTANCE;
    private class DO_EXPRESSION_DEFINITION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly DO_EXPRESSION_DEFINITION_INTERNAL INSTANCE = new DO_EXPRESSION_DEFINITION_INTERNAL ();
      DO_EXPRESSION_DEFINITION_INTERNAL() : base("DO_EXPRESSION_DEFINITION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.DoExpressionDefinition();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DOWNCAST_EXPRESSION = DOWNCAST_EXPRESSION_INTERNAL.INSTANCE;
    private class DOWNCAST_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly DOWNCAST_EXPRESSION_INTERNAL INSTANCE = new DOWNCAST_EXPRESSION_INTERNAL ();
      DOWNCAST_EXPRESSION_INTERNAL() : base("DOWNCAST_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new DowncastExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DOWNCAST_EXPRESSION_TO_TYPE = DOWNCAST_EXPRESSION_TO_TYPE_INTERNAL.INSTANCE;
    private class DOWNCAST_EXPRESSION_TO_TYPE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly DOWNCAST_EXPRESSION_TO_TYPE_INTERNAL INSTANCE = new DOWNCAST_EXPRESSION_TO_TYPE_INTERNAL ();
      DOWNCAST_EXPRESSION_TO_TYPE_INTERNAL() : base("DOWNCAST_EXPRESSION_TO_TYPE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new DowncastExpressionToType();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EMPTY_ARRAY = EMPTY_ARRAY_INTERNAL.INSTANCE;
    private class EMPTY_ARRAY_INTERNAL : $elementTypeBaseClass
    {
      public static readonly EMPTY_ARRAY_INTERNAL INSTANCE = new EMPTY_ARRAY_INTERNAL ();
      EMPTY_ARRAY_INTERNAL() : base("EMPTY_ARRAY") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new EmptyArray();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EMPTY_LIST = EMPTY_LIST_INTERNAL.INSTANCE;
    private class EMPTY_LIST_INTERNAL : $elementTypeBaseClass
    {
      public static readonly EMPTY_LIST_INTERNAL INSTANCE = new EMPTY_LIST_INTERNAL ();
      EMPTY_LIST_INTERNAL() : base("EMPTY_LIST") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new EmptyList();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXCEPTION_ALIAS = EXCEPTION_ALIAS_INTERNAL.INSTANCE;
    private class EXCEPTION_ALIAS_INTERNAL : $elementTypeBaseClass
    {
      public static readonly EXCEPTION_ALIAS_INTERNAL INSTANCE = new EXCEPTION_ALIAS_INTERNAL ();
      EXCEPTION_ALIAS_INTERNAL() : base("EXCEPTION_ALIAS") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ExceptionAlias();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXCEPTION_DECLARATION = EXCEPTION_DECLARATION_INTERNAL.INSTANCE;
    private class EXCEPTION_DECLARATION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly EXCEPTION_DECLARATION_INTERNAL INSTANCE = new EXCEPTION_DECLARATION_INTERNAL ();
      EXCEPTION_DECLARATION_INTERNAL() : base("EXCEPTION_DECLARATION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ExceptionDeclaration();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXCEPTION_REFERENCE = EXCEPTION_REFERENCE_INTERNAL.INSTANCE;
    private class EXCEPTION_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly EXCEPTION_REFERENCE_INTERNAL INSTANCE = new EXCEPTION_REFERENCE_INTERNAL ();
      EXCEPTION_REFERENCE_INTERNAL() : base("EXCEPTION_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ExceptionReference();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXPRESSION_BLOCK = EXPRESSION_BLOCK_INTERNAL.INSTANCE;
    private class EXPRESSION_BLOCK_INTERNAL : $elementTypeBaseClass
    {
      public static readonly EXPRESSION_BLOCK_INTERNAL INSTANCE = new EXPRESSION_BLOCK_INTERNAL ();
      EXPRESSION_BLOCK_INTERNAL() : base("EXPRESSION_BLOCK") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ExpressionBlock();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXPRESSION_SEQUENCE = EXPRESSION_SEQUENCE_INTERNAL.INSTANCE;
    private class EXPRESSION_SEQUENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly EXPRESSION_SEQUENCE_INTERNAL INSTANCE = new EXPRESSION_SEQUENCE_INTERNAL ();
      EXPRESSION_SEQUENCE_INTERNAL() : base("EXPRESSION_SEQUENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ExpressionSequence();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FIELD_ASSIGNMENT = FIELD_ASSIGNMENT_INTERNAL.INSTANCE;
    private class FIELD_ASSIGNMENT_INTERNAL : $elementTypeBaseClass
    {
      public static readonly FIELD_ASSIGNMENT_INTERNAL INSTANCE = new FIELD_ASSIGNMENT_INTERNAL ();
      FIELD_ASSIGNMENT_INTERNAL() : base("FIELD_ASSIGNMENT") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new FieldAssignment();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FIELD_ASSIGNMENT_LIST = FIELD_ASSIGNMENT_LIST_INTERNAL.INSTANCE;
    private class FIELD_ASSIGNMENT_LIST_INTERNAL : $elementTypeBaseClass
    {
      public static readonly FIELD_ASSIGNMENT_LIST_INTERNAL INSTANCE = new FIELD_ASSIGNMENT_LIST_INTERNAL ();
      FIELD_ASSIGNMENT_LIST_INTERNAL() : base("FIELD_ASSIGNMENT_LIST") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new FieldAssignmentList();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FIELD_DECLARATION = FIELD_DECLARATION_INTERNAL.INSTANCE;
    private class FIELD_DECLARATION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly FIELD_DECLARATION_INTERNAL INSTANCE = new FIELD_DECLARATION_INTERNAL ();
      FIELD_DECLARATION_INTERNAL() : base("FIELD_DECLARATION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FieldDeclaration();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FIELD_DECLARATION_LIST = FIELD_DECLARATION_LIST_INTERNAL.INSTANCE;
    private class FIELD_DECLARATION_LIST_INTERNAL : $elementTypeBaseClass
    {
      public static readonly FIELD_DECLARATION_LIST_INTERNAL INSTANCE = new FIELD_DECLARATION_LIST_INTERNAL ();
      FIELD_DECLARATION_LIST_INTERNAL() : base("FIELD_DECLARATION_LIST") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new FieldDeclarationList();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FIELD_PATTERN = FIELD_PATTERN_INTERNAL.INSTANCE;
    private class FIELD_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly FIELD_PATTERN_INTERNAL INSTANCE = new FIELD_PATTERN_INTERNAL ();
      FIELD_PATTERN_INTERNAL() : base("FIELD_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new FieldPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FIELD_PATTERN_LIST = FIELD_PATTERN_LIST_INTERNAL.INSTANCE;
    private class FIELD_PATTERN_LIST_INTERNAL : $elementTypeBaseClass
    {
      public static readonly FIELD_PATTERN_LIST_INTERNAL INSTANCE = new FIELD_PATTERN_LIST_INTERNAL ();
      FIELD_PATTERN_LIST_INTERNAL() : base("FIELD_PATTERN_LIST") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new FieldPatternList();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FIELD_REFERENCE = FIELD_REFERENCE_INTERNAL.INSTANCE;
    private class FIELD_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly FIELD_REFERENCE_INTERNAL INSTANCE = new FIELD_REFERENCE_INTERNAL ();
      FIELD_REFERENCE_INTERNAL() : base("FIELD_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FieldReference();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FOR_ALL_TYPE_EXPRESSION = FOR_ALL_TYPE_EXPRESSION_INTERNAL.INSTANCE;
    private class FOR_ALL_TYPE_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly FOR_ALL_TYPE_EXPRESSION_INTERNAL INSTANCE = new FOR_ALL_TYPE_EXPRESSION_INTERNAL ();
      FOR_ALL_TYPE_EXPRESSION_INTERNAL() : base("FOR_ALL_TYPE_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ForAllTypeExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FOR_STATEMENT_EXPRESSION = FOR_STATEMENT_EXPRESSION_INTERNAL.INSTANCE;
    private class FOR_STATEMENT_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly FOR_STATEMENT_EXPRESSION_INTERNAL INSTANCE = new FOR_STATEMENT_EXPRESSION_INTERNAL ();
      FOR_STATEMENT_EXPRESSION_INTERNAL() : base("FOR_STATEMENT_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ForStatementExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FUN_EXPRESSION = FUN_EXPRESSION_INTERNAL.INSTANCE;
    private class FUN_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly FUN_EXPRESSION_INTERNAL INSTANCE = new FUN_EXPRESSION_INTERNAL ();
      FUN_EXPRESSION_INTERNAL() : base("FUN_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new FunExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FUNCTION_EXPRESSION = FUNCTION_EXPRESSION_INTERNAL.INSTANCE;
    private class FUNCTION_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly FUNCTION_EXPRESSION_INTERNAL INSTANCE = new FUNCTION_EXPRESSION_INTERNAL ();
      FUNCTION_EXPRESSION_INTERNAL() : base("FUNCTION_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new FunctionExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FUNCTION_TYPE = FUNCTION_TYPE_INTERNAL.INSTANCE;
    private class FUNCTION_TYPE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly FUNCTION_TYPE_INTERNAL INSTANCE = new FUNCTION_TYPE_INTERNAL ();
      FUNCTION_TYPE_INTERNAL() : base("FUNCTION_TYPE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FunctionType();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ID_REFERENCE = ID_REFERENCE_INTERNAL.INSTANCE;
    private class ID_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly ID_REFERENCE_INTERNAL INSTANCE = new ID_REFERENCE_INTERNAL ();
      ID_REFERENCE_INTERNAL() : base("ID_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.IdReference();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType _IDENTIFIER = JetBrains.ReSharper.Psi.FSharp.Impl.Lexing.FSharpTokenType.IDENTIFIER ;
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IF_STATEMENT_EXPRESSION = IF_STATEMENT_EXPRESSION_INTERNAL.INSTANCE;
    private class IF_STATEMENT_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly IF_STATEMENT_EXPRESSION_INTERNAL INSTANCE = new IF_STATEMENT_EXPRESSION_INTERNAL ();
      IF_STATEMENT_EXPRESSION_INTERNAL() : base("IF_STATEMENT_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new IfStatementExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IMPLEMENTATION_UNIT = IMPLEMENTATION_UNIT_INTERNAL.INSTANCE;
    private class IMPLEMENTATION_UNIT_INTERNAL : $elementTypeBaseClass
    {
      public static readonly IMPLEMENTATION_UNIT_INTERNAL INSTANCE = new IMPLEMENTATION_UNIT_INTERNAL ();
      IMPLEMENTATION_UNIT_INTERNAL() : base("IMPLEMENTATION_UNIT") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ImplementationUnit();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INFIX_OPERATOR_EXPRESSION = INFIX_OPERATOR_EXPRESSION_INTERNAL.INSTANCE;
    private class INFIX_OPERATOR_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly INFIX_OPERATOR_EXPRESSION_INTERNAL INSTANCE = new INFIX_OPERATOR_EXPRESSION_INTERNAL ();
      INFIX_OPERATOR_EXPRESSION_INTERNAL() : base("INFIX_OPERATOR_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new InfixOperatorExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INTERFACE_UNIT = INTERFACE_UNIT_INTERNAL.INSTANCE;
    private class INTERFACE_UNIT_INTERNAL : $elementTypeBaseClass
    {
      public static readonly INTERFACE_UNIT_INTERNAL INSTANCE = new INTERFACE_UNIT_INTERNAL ();
      INTERFACE_UNIT_INTERNAL() : base("INTERFACE_UNIT") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new InterfaceUnit();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LAZY_EXPRESSION = LAZY_EXPRESSION_INTERNAL.INSTANCE;
    private class LAZY_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly LAZY_EXPRESSION_INTERNAL INSTANCE = new LAZY_EXPRESSION_INTERNAL ();
      LAZY_EXPRESSION_INTERNAL() : base("LAZY_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new LazyExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LAZY_TYPE = LAZY_TYPE_INTERNAL.INSTANCE;
    private class LAZY_TYPE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly LAZY_TYPE_INTERNAL INSTANCE = new LAZY_TYPE_INTERNAL ();
      LAZY_TYPE_INTERNAL() : base("LAZY_TYPE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.LazyType();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LET_DEFINITION = LET_DEFINITION_INTERNAL.INSTANCE;
    private class LET_DEFINITION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly LET_DEFINITION_INTERNAL INSTANCE = new LET_DEFINITION_INTERNAL ();
      LET_DEFINITION_INTERNAL() : base("LET_DEFINITION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.LetDefinition();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LIST_CONCATENATE_EXPRESSION = LIST_CONCATENATE_EXPRESSION_INTERNAL.INSTANCE;
    private class LIST_CONCATENATE_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly LIST_CONCATENATE_EXPRESSION_INTERNAL INSTANCE = new LIST_CONCATENATE_EXPRESSION_INTERNAL ();
      LIST_CONCATENATE_EXPRESSION_INTERNAL() : base("LIST_CONCATENATE_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ListConcatenateExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LIST_CONSTRUCTOR_EXPRESSION = LIST_CONSTRUCTOR_EXPRESSION_INTERNAL.INSTANCE;
    private class LIST_CONSTRUCTOR_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly LIST_CONSTRUCTOR_EXPRESSION_INTERNAL INSTANCE = new LIST_CONSTRUCTOR_EXPRESSION_INTERNAL ();
      LIST_CONSTRUCTOR_EXPRESSION_INTERNAL() : base("LIST_CONSTRUCTOR_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ListConstructorExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LIST_CONSTRUCTOR_PATTERN = LIST_CONSTRUCTOR_PATTERN_INTERNAL.INSTANCE;
    private class LIST_CONSTRUCTOR_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly LIST_CONSTRUCTOR_PATTERN_INTERNAL INSTANCE = new LIST_CONSTRUCTOR_PATTERN_INTERNAL ();
      LIST_CONSTRUCTOR_PATTERN_INTERNAL() : base("LIST_CONSTRUCTOR_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ListConstructorPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LOCAL_DECLARATIONS_IN_EXPRESSION = LOCAL_DECLARATIONS_IN_EXPRESSION_INTERNAL.INSTANCE;
    private class LOCAL_DECLARATIONS_IN_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly LOCAL_DECLARATIONS_IN_EXPRESSION_INTERNAL INSTANCE = new LOCAL_DECLARATIONS_IN_EXPRESSION_INTERNAL ();
      LOCAL_DECLARATIONS_IN_EXPRESSION_INTERNAL() : base("LOCAL_DECLARATIONS_IN_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.LocalDeclarationsInExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MATCH_CLAUSE = MATCH_CLAUSE_INTERNAL.INSTANCE;
    private class MATCH_CLAUSE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly MATCH_CLAUSE_INTERNAL INSTANCE = new MATCH_CLAUSE_INTERNAL ();
      MATCH_CLAUSE_INTERNAL() : base("MATCH_CLAUSE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.MatchClause();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MATCH_EXPRESSION = MATCH_EXPRESSION_INTERNAL.INSTANCE;
    private class MATCH_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly MATCH_EXPRESSION_INTERNAL INSTANCE = new MATCH_EXPRESSION_INTERNAL ();
      MATCH_EXPRESSION_INTERNAL() : base("MATCH_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new MatchExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MEMBER_ACCESS_EXPRESSION = MEMBER_ACCESS_EXPRESSION_INTERNAL.INSTANCE;
    private class MEMBER_ACCESS_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly MEMBER_ACCESS_EXPRESSION_INTERNAL INSTANCE = new MEMBER_ACCESS_EXPRESSION_INTERNAL ();
      MEMBER_ACCESS_EXPRESSION_INTERNAL() : base("MEMBER_ACCESS_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.MemberAccessExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MODULE_REFERENCE = MODULE_REFERENCE_INTERNAL.INSTANCE;
    private class MODULE_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly MODULE_REFERENCE_INTERNAL INSTANCE = new MODULE_REFERENCE_INTERNAL ();
      MODULE_REFERENCE_INTERNAL() : base("MODULE_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ModuleReference();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MODULE_REFERENCE_LIST = MODULE_REFERENCE_LIST_INTERNAL.INSTANCE;
    private class MODULE_REFERENCE_LIST_INTERNAL : $elementTypeBaseClass
    {
      public static readonly MODULE_REFERENCE_LIST_INTERNAL INSTANCE = new MODULE_REFERENCE_LIST_INTERNAL ();
      MODULE_REFERENCE_LIST_INTERNAL() : base("MODULE_REFERENCE_LIST") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ModuleReferenceList();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MODULE_REFERENCE_OLD = MODULE_REFERENCE_OLD_INTERNAL.INSTANCE;
    private class MODULE_REFERENCE_OLD_INTERNAL : $elementTypeBaseClass
    {
      public static readonly MODULE_REFERENCE_OLD_INTERNAL INSTANCE = new MODULE_REFERENCE_OLD_INTERNAL ();
      MODULE_REFERENCE_OLD_INTERNAL() : base("MODULE_REFERENCE_OLD") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ModuleReferenceOld();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MULTI_PARAMETER_TYPE_REFERENCE = MULTI_PARAMETER_TYPE_REFERENCE_INTERNAL.INSTANCE;
    private class MULTI_PARAMETER_TYPE_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly MULTI_PARAMETER_TYPE_REFERENCE_INTERNAL INSTANCE = new MULTI_PARAMETER_TYPE_REFERENCE_INTERNAL ();
      MULTI_PARAMETER_TYPE_REFERENCE_INTERNAL() : base("MULTI_PARAMETER_TYPE_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.MultiParameterTypeReference();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MULTIPLE_MATCHING = MULTIPLE_MATCHING_INTERNAL.INSTANCE;
    private class MULTIPLE_MATCHING_INTERNAL : $elementTypeBaseClass
    {
      public static readonly MULTIPLE_MATCHING_INTERNAL INSTANCE = new MULTIPLE_MATCHING_INTERNAL ();
      MULTIPLE_MATCHING_INTERNAL() : base("MULTIPLE_MATCHING") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.MultipleMatching();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MUTABLE_BINDING_VALUE = MUTABLE_BINDING_VALUE_INTERNAL.INSTANCE;
    private class MUTABLE_BINDING_VALUE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly MUTABLE_BINDING_VALUE_INTERNAL INSTANCE = new MUTABLE_BINDING_VALUE_INTERNAL ();
      MUTABLE_BINDING_VALUE_INTERNAL() : base("MUTABLE_BINDING_VALUE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.MutableBindingValue();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ONE_PARAMETER_TYPE_REFERENCE = ONE_PARAMETER_TYPE_REFERENCE_INTERNAL.INSTANCE;
    private class ONE_PARAMETER_TYPE_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly ONE_PARAMETER_TYPE_REFERENCE_INTERNAL INSTANCE = new ONE_PARAMETER_TYPE_REFERENCE_INTERNAL ();
      ONE_PARAMETER_TYPE_REFERENCE_INTERNAL() : base("ONE_PARAMETER_TYPE_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.OneParameterTypeReference();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType OPEN_MODULE_DEFINITION = OPEN_MODULE_DEFINITION_INTERNAL.INSTANCE;
    private class OPEN_MODULE_DEFINITION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly OPEN_MODULE_DEFINITION_INTERNAL INSTANCE = new OPEN_MODULE_DEFINITION_INTERNAL ();
      OPEN_MODULE_DEFINITION_INTERNAL() : base("OPEN_MODULE_DEFINITION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.OpenModuleDefinition();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType OPERATOR_NAME = OPERATOR_NAME_INTERNAL.INSTANCE;
    private class OPERATOR_NAME_INTERNAL : $elementTypeBaseClass
    {
      public static readonly OPERATOR_NAME_INTERNAL INSTANCE = new OPERATOR_NAME_INTERNAL ();
      OPERATOR_NAME_INTERNAL() : base("OPERATOR_NAME") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.OperatorName();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType OR_EXPRESSION = OR_EXPRESSION_INTERNAL.INSTANCE;
    private class OR_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly OR_EXPRESSION_INTERNAL INSTANCE = new OR_EXPRESSION_INTERNAL ();
      OR_EXPRESSION_INTERNAL() : base("OR_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new OrExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PARAMETERIZED_CONSTRUCTOR_PATTERN = PARAMETERIZED_CONSTRUCTOR_PATTERN_INTERNAL.INSTANCE;
    private class PARAMETERIZED_CONSTRUCTOR_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly PARAMETERIZED_CONSTRUCTOR_PATTERN_INTERNAL INSTANCE = new PARAMETERIZED_CONSTRUCTOR_PATTERN_INTERNAL ();
      PARAMETERIZED_CONSTRUCTOR_PATTERN_INTERNAL() : base("PARAMETERIZED_CONSTRUCTOR_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ParameterizedConstructorPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PARENTHESIZED_EXPRESSION = PARENTHESIZED_EXPRESSION_INTERNAL.INSTANCE;
    private class PARENTHESIZED_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly PARENTHESIZED_EXPRESSION_INTERNAL INSTANCE = new PARENTHESIZED_EXPRESSION_INTERNAL ();
      PARENTHESIZED_EXPRESSION_INTERNAL() : base("PARENTHESIZED_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ParenthesizedExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PARENTHESIZED_FIELD_VALUE_EXPRESSION = PARENTHESIZED_FIELD_VALUE_EXPRESSION_INTERNAL.INSTANCE;
    private class PARENTHESIZED_FIELD_VALUE_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly PARENTHESIZED_FIELD_VALUE_EXPRESSION_INTERNAL INSTANCE = new PARENTHESIZED_FIELD_VALUE_EXPRESSION_INTERNAL ();
      PARENTHESIZED_FIELD_VALUE_EXPRESSION_INTERNAL() : base("PARENTHESIZED_FIELD_VALUE_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ParenthesizedFieldValueExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PARENTHESIZED_PATTERN = PARENTHESIZED_PATTERN_INTERNAL.INSTANCE;
    private class PARENTHESIZED_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly PARENTHESIZED_PATTERN_INTERNAL INSTANCE = new PARENTHESIZED_PATTERN_INTERNAL ();
      PARENTHESIZED_PATTERN_INTERNAL() : base("PARENTHESIZED_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new ParenthesizedPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PARENTHESIZED_TYPE = PARENTHESIZED_TYPE_INTERNAL.INSTANCE;
    private class PARENTHESIZED_TYPE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly PARENTHESIZED_TYPE_INTERNAL INSTANCE = new PARENTHESIZED_TYPE_INTERNAL ();
      PARENTHESIZED_TYPE_INTERNAL() : base("PARENTHESIZED_TYPE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ParenthesizedType();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PATTERN_MATCHING = PATTERN_MATCHING_INTERNAL.INSTANCE;
    private class PATTERN_MATCHING_INTERNAL : $elementTypeBaseClass
    {
      public static readonly PATTERN_MATCHING_INTERNAL INSTANCE = new PATTERN_MATCHING_INTERNAL ();
      PATTERN_MATCHING_INTERNAL() : base("PATTERN_MATCHING") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new PatternMatching();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREFIX_OPERATOR_EXPRESSION = PREFIX_OPERATOR_EXPRESSION_INTERNAL.INSTANCE;
    private class PREFIX_OPERATOR_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly PREFIX_OPERATOR_EXPRESSION_INTERNAL INSTANCE = new PREFIX_OPERATOR_EXPRESSION_INTERNAL ();
      PREFIX_OPERATOR_EXPRESSION_INTERNAL() : base("PREFIX_OPERATOR_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new PrefixOperatorExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUALIFIED_ID_REFERENCE = QUALIFIED_ID_REFERENCE_INTERNAL.INSTANCE;
    private class QUALIFIED_ID_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly QUALIFIED_ID_REFERENCE_INTERNAL INSTANCE = new QUALIFIED_ID_REFERENCE_INTERNAL ();
      QUALIFIED_ID_REFERENCE_INTERNAL() : base("QUALIFIED_ID_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new QualifiedIdReference();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUALIFIED_IDENTIFIER_NAME = QUALIFIED_IDENTIFIER_NAME_INTERNAL.INSTANCE;
    private class QUALIFIED_IDENTIFIER_NAME_INTERNAL : $elementTypeBaseClass
    {
      public static readonly QUALIFIED_IDENTIFIER_NAME_INTERNAL INSTANCE = new QUALIFIED_IDENTIFIER_NAME_INTERNAL ();
      QUALIFIED_IDENTIFIER_NAME_INTERNAL() : base("QUALIFIED_IDENTIFIER_NAME") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.QualifiedIdentifierName();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUALIFIED_VALUE_NAME = QUALIFIED_VALUE_NAME_INTERNAL.INSTANCE;
    private class QUALIFIED_VALUE_NAME_INTERNAL : $elementTypeBaseClass
    {
      public static readonly QUALIFIED_VALUE_NAME_INTERNAL INSTANCE = new QUALIFIED_VALUE_NAME_INTERNAL ();
      QUALIFIED_VALUE_NAME_INTERNAL() : base("QUALIFIED_VALUE_NAME") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.QualifiedValueName();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUALIFIED_VALUE_REFERENCE = QUALIFIED_VALUE_REFERENCE_INTERNAL.INSTANCE;
    private class QUALIFIED_VALUE_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly QUALIFIED_VALUE_REFERENCE_INTERNAL INSTANCE = new QUALIFIED_VALUE_REFERENCE_INTERNAL ();
      QUALIFIED_VALUE_REFERENCE_INTERNAL() : base("QUALIFIED_VALUE_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.QualifiedValueReference();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RANGE_PATTERN = RANGE_PATTERN_INTERNAL.INSTANCE;
    private class RANGE_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly RANGE_PATTERN_INTERNAL INSTANCE = new RANGE_PATTERN_INTERNAL ();
      RANGE_PATTERN_INTERNAL() : base("RANGE_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new RangePattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RECORD_EXPRESSION = RECORD_EXPRESSION_INTERNAL.INSTANCE;
    private class RECORD_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly RECORD_EXPRESSION_INTERNAL INSTANCE = new RECORD_EXPRESSION_INTERNAL ();
      RECORD_EXPRESSION_INTERNAL() : base("RECORD_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new RecordExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RECORD_PATTERN = RECORD_PATTERN_INTERNAL.INSTANCE;
    private class RECORD_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly RECORD_PATTERN_INTERNAL INSTANCE = new RECORD_PATTERN_INTERNAL ();
      RECORD_PATTERN_INTERNAL() : base("RECORD_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new RecordPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RECORD_TYPE_REPRESENTATION = RECORD_TYPE_REPRESENTATION_INTERNAL.INSTANCE;
    private class RECORD_TYPE_REPRESENTATION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly RECORD_TYPE_REPRESENTATION_INTERNAL INSTANCE = new RECORD_TYPE_REPRESENTATION_INTERNAL ();
      RECORD_TYPE_REPRESENTATION_INTERNAL() : base("RECORD_TYPE_REPRESENTATION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new RecordTypeRepresentation();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType STRING_CONCATENATE_EXPRESSION = STRING_CONCATENATE_EXPRESSION_INTERNAL.INSTANCE;
    private class STRING_CONCATENATE_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly STRING_CONCATENATE_EXPRESSION_INTERNAL INSTANCE = new STRING_CONCATENATE_EXPRESSION_INTERNAL ();
      STRING_CONCATENATE_EXPRESSION_INTERNAL() : base("STRING_CONCATENATE_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new StringConcatenateExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TRY_FINALLY_EXPRESSION = TRY_FINALLY_EXPRESSION_INTERNAL.INSTANCE;
    private class TRY_FINALLY_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TRY_FINALLY_EXPRESSION_INTERNAL INSTANCE = new TRY_FINALLY_EXPRESSION_INTERNAL ();
      TRY_FINALLY_EXPRESSION_INTERNAL() : base("TRY_FINALLY_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new TryFinallyExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TRY_WITH_EXPRESSION = TRY_WITH_EXPRESSION_INTERNAL.INSTANCE;
    private class TRY_WITH_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TRY_WITH_EXPRESSION_INTERNAL INSTANCE = new TRY_WITH_EXPRESSION_INTERNAL ();
      TRY_WITH_EXPRESSION_INTERNAL() : base("TRY_WITH_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new TryWithExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TUPLE_EXPRESSION = TUPLE_EXPRESSION_INTERNAL.INSTANCE;
    private class TUPLE_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TUPLE_EXPRESSION_INTERNAL INSTANCE = new TUPLE_EXPRESSION_INTERNAL ();
      TUPLE_EXPRESSION_INTERNAL() : base("TUPLE_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new TupleExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TUPLE_PATTERN = TUPLE_PATTERN_INTERNAL.INSTANCE;
    private class TUPLE_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TUPLE_PATTERN_INTERNAL INSTANCE = new TUPLE_PATTERN_INTERNAL ();
      TUPLE_PATTERN_INTERNAL() : base("TUPLE_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new TuplePattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TUPLE_TYPE = TUPLE_TYPE_INTERNAL.INSTANCE;
    private class TUPLE_TYPE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TUPLE_TYPE_INTERNAL INSTANCE = new TUPLE_TYPE_INTERNAL ();
      TUPLE_TYPE_INTERNAL() : base("TUPLE_TYPE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TupleType();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_DECLARATION = TYPE_DECLARATION_INTERNAL.INSTANCE;
    private class TYPE_DECLARATION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TYPE_DECLARATION_INTERNAL INSTANCE = new TYPE_DECLARATION_INTERNAL ();
      TYPE_DECLARATION_INTERNAL() : base("TYPE_DECLARATION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TypeDeclaration();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_DEFINITION = TYPE_DEFINITION_INTERNAL.INSTANCE;
    private class TYPE_DEFINITION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TYPE_DEFINITION_INTERNAL INSTANCE = new TYPE_DEFINITION_INTERNAL ();
      TYPE_DEFINITION_INTERNAL() : base("TYPE_DEFINITION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TypeDefinition();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_DECLARATION = TYPE_PARAMETER_DECLARATION_INTERNAL.INSTANCE;
    private class TYPE_PARAMETER_DECLARATION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TYPE_PARAMETER_DECLARATION_INTERNAL INSTANCE = new TYPE_PARAMETER_DECLARATION_INTERNAL ();
      TYPE_PARAMETER_DECLARATION_INTERNAL() : base("TYPE_PARAMETER_DECLARATION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TypeParameterDeclaration();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_LIST = TYPE_PARAMETER_LIST_INTERNAL.INSTANCE;
    private class TYPE_PARAMETER_LIST_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TYPE_PARAMETER_LIST_INTERNAL INSTANCE = new TYPE_PARAMETER_LIST_INTERNAL ();
      TYPE_PARAMETER_LIST_INTERNAL() : base("TYPE_PARAMETER_LIST") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new TypeParameterList();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_REFERENCE = TYPE_PARAMETER_REFERENCE_INTERNAL.INSTANCE;
    private class TYPE_PARAMETER_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TYPE_PARAMETER_REFERENCE_INTERNAL INSTANCE = new TYPE_PARAMETER_REFERENCE_INTERNAL ();
      TYPE_PARAMETER_REFERENCE_INTERNAL() : base("TYPE_PARAMETER_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TypeParameterReference();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_REF_OR_CONSTRUCTOR_DECL = TYPE_REF_OR_CONSTRUCTOR_DECL_INTERNAL.INSTANCE;
    private class TYPE_REF_OR_CONSTRUCTOR_DECL_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TYPE_REF_OR_CONSTRUCTOR_DECL_INTERNAL INSTANCE = new TYPE_REF_OR_CONSTRUCTOR_DECL_INTERNAL ();
      TYPE_REF_OR_CONSTRUCTOR_DECL_INTERNAL() : base("TYPE_REF_OR_CONSTRUCTOR_DECL") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TypeRefOrConstructorDecl();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_REFERENCE = TYPE_REFERENCE_INTERNAL.INSTANCE;
    private class TYPE_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TYPE_REFERENCE_INTERNAL INSTANCE = new TYPE_REFERENCE_INTERNAL ();
      TYPE_REFERENCE_INTERNAL() : base("TYPE_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TypeReference();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_TEST_EXPRESSION = TYPE_TEST_EXPRESSION_INTERNAL.INSTANCE;
    private class TYPE_TEST_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TYPE_TEST_EXPRESSION_INTERNAL INSTANCE = new TYPE_TEST_EXPRESSION_INTERNAL ();
      TYPE_TEST_EXPRESSION_INTERNAL() : base("TYPE_TEST_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new TypeTestExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_TEST_PATTERN = TYPE_TEST_PATTERN_INTERNAL.INSTANCE;
    private class TYPE_TEST_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TYPE_TEST_PATTERN_INTERNAL INSTANCE = new TYPE_TEST_PATTERN_INTERNAL ();
      TYPE_TEST_PATTERN_INTERNAL() : base("TYPE_TEST_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new TypeTestPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPED_EXPRESSION = TYPED_EXPRESSION_INTERNAL.INSTANCE;
    private class TYPED_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TYPED_EXPRESSION_INTERNAL INSTANCE = new TYPED_EXPRESSION_INTERNAL ();
      TYPED_EXPRESSION_INTERNAL() : base("TYPED_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new TypedExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPED_PATTERN = TYPED_PATTERN_INTERNAL.INSTANCE;
    private class TYPED_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly TYPED_PATTERN_INTERNAL INSTANCE = new TYPED_PATTERN_INTERNAL ();
      TYPED_PATTERN_INTERNAL() : base("TYPED_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new TypedPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNARY_MINUS_EXPRESSION = UNARY_MINUS_EXPRESSION_INTERNAL.INSTANCE;
    private class UNARY_MINUS_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly UNARY_MINUS_EXPRESSION_INTERNAL INSTANCE = new UNARY_MINUS_EXPRESSION_INTERNAL ();
      UNARY_MINUS_EXPRESSION_INTERNAL() : base("UNARY_MINUS_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new UnaryMinusExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNDERLINE_PATTERN = UNDERLINE_PATTERN_INTERNAL.INSTANCE;
    private class UNDERLINE_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly UNDERLINE_PATTERN_INTERNAL INSTANCE = new UNDERLINE_PATTERN_INTERNAL ();
      UNDERLINE_PATTERN_INTERNAL() : base("UNDERLINE_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new UnderlinePattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNDERLINE_TYPE = UNDERLINE_TYPE_INTERNAL.INSTANCE;
    private class UNDERLINE_TYPE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly UNDERLINE_TYPE_INTERNAL INSTANCE = new UNDERLINE_TYPE_INTERNAL ();
      UNDERLINE_TYPE_INTERNAL() : base("UNDERLINE_TYPE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.UnderlineType();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNIT = UNIT_INTERNAL.INSTANCE;
    private class UNIT_INTERNAL : $elementTypeBaseClass
    {
      public static readonly UNIT_INTERNAL INSTANCE = new UNIT_INTERNAL ();
      UNIT_INTERNAL() : base("UNIT") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new Unit();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UPCAST_EXPRESSION = UPCAST_EXPRESSION_INTERNAL.INSTANCE;
    private class UPCAST_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly UPCAST_EXPRESSION_INTERNAL INSTANCE = new UPCAST_EXPRESSION_INTERNAL ();
      UPCAST_EXPRESSION_INTERNAL() : base("UPCAST_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new UpcastExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UPCAST_EXPRESSION_TO_TYPE = UPCAST_EXPRESSION_TO_TYPE_INTERNAL.INSTANCE;
    private class UPCAST_EXPRESSION_TO_TYPE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly UPCAST_EXPRESSION_TO_TYPE_INTERNAL INSTANCE = new UPCAST_EXPRESSION_TO_TYPE_INTERNAL ();
      UPCAST_EXPRESSION_TO_TYPE_INTERNAL() : base("UPCAST_EXPRESSION_TO_TYPE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new UpcastExpressionToType();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType VALUE_DECLARATION_PATTERN = VALUE_DECLARATION_PATTERN_INTERNAL.INSTANCE;
    private class VALUE_DECLARATION_PATTERN_INTERNAL : $elementTypeBaseClass
    {
      public static readonly VALUE_DECLARATION_PATTERN_INTERNAL INSTANCE = new VALUE_DECLARATION_PATTERN_INTERNAL ();
      VALUE_DECLARATION_PATTERN_INTERNAL() : base("VALUE_DECLARATION_PATTERN") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ValueDeclarationPattern();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType VALUE_REFERENCE_EXPRESSION = VALUE_REFERENCE_EXPRESSION_INTERNAL.INSTANCE;
    private class VALUE_REFERENCE_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly VALUE_REFERENCE_EXPRESSION_INTERNAL INSTANCE = new VALUE_REFERENCE_EXPRESSION_INTERNAL ();
      VALUE_REFERENCE_EXPRESSION_INTERNAL() : base("VALUE_REFERENCE_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ValueReferenceExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType VALUE_SPECIFICATION = VALUE_SPECIFICATION_INTERNAL.INSTANCE;
    private class VALUE_SPECIFICATION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly VALUE_SPECIFICATION_INTERNAL INSTANCE = new VALUE_SPECIFICATION_INTERNAL ();
      VALUE_SPECIFICATION_INTERNAL() : base("VALUE_SPECIFICATION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ValueSpecification();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType WHILE_STATEMENT_EXPRESSION = WHILE_STATEMENT_EXPRESSION_INTERNAL.INSTANCE;
    private class WHILE_STATEMENT_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly WHILE_STATEMENT_EXPRESSION_INTERNAL INSTANCE = new WHILE_STATEMENT_EXPRESSION_INTERNAL ();
      WHILE_STATEMENT_EXPRESSION_INTERNAL() : base("WHILE_STATEMENT_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new WhileStatementExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType WITH_RECORD_EXPRESSION = WITH_RECORD_EXPRESSION_INTERNAL.INSTANCE;
    private class WITH_RECORD_EXPRESSION_INTERNAL : $elementTypeBaseClass
    {
      public static readonly WITH_RECORD_EXPRESSION_INTERNAL INSTANCE = new WITH_RECORD_EXPRESSION_INTERNAL ();
      WITH_RECORD_EXPRESSION_INTERNAL() : base("WITH_RECORD_EXPRESSION") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new WithRecordExpression();
      }
    }
    public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType WITHOUT_PARAMETER_TYPE_REFERENCE = WITHOUT_PARAMETER_TYPE_REFERENCE_INTERNAL.INSTANCE;
    private class WITHOUT_PARAMETER_TYPE_REFERENCE_INTERNAL : $elementTypeBaseClass
    {
      public static readonly WITHOUT_PARAMETER_TYPE_REFERENCE_INTERNAL INSTANCE = new WITHOUT_PARAMETER_TYPE_REFERENCE_INTERNAL ();
      WITHOUT_PARAMETER_TYPE_REFERENCE_INTERNAL() : base("WITHOUT_PARAMETER_TYPE_REFERENCE") {}
      public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create()
      {
         return new JetBrains.ReSharper.Psi.FSharp.Impl.Tree.WithoutParameterTypeReference();
      }
    }
  }
}
