//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal partial class QualifiedIdReference : ExpressionBase, JetBrains.ReSharper.Psi.FSharp.IQualifiedIdReferenceNode, JetBrains.ReSharper.Psi.FSharp.IQualifiedIdReference {
    public const short REFERENCES= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 1;
    public const short FSHARP_DOT= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_DOT;
    internal QualifiedIdReference() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.QUALIFIED_ID_REFERENCE; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitQualifiedIdReference(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitQualifiedIdReference(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitQualifiedIdReferenceNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitQualifiedIdReferenceNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitQualifiedIdReferenceNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_DOT_OP, FSHARP_DOT),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ID_REFERENCE, REFERENCES),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> Dot {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.ITokenNode>(FSHARP_DOT); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference> References {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference>(REFERENCES); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode> ReferencesNode {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode>(REFERENCES); }
    }
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference AddReferenceBefore (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference param, JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference anchor)
    {
      throw new NotImplementedException ("AddReferenceBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode AddReferencesNodeBefore (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode param, JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode anchor)
    {
      throw new NotImplementedException ("AddReferencesNodeBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference AddReferenceAfter (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference param, JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference anchor)
    {
      throw new NotImplementedException ("AddReferenceAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference)result;
        } else {
          current = next;
        }
        while (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_DOT_OP) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference)result;
          } else {
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode AddReferencesNodeAfter (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode param, JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode anchor)
    {
      throw new NotImplementedException ("AddReferencesNodeAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode)result;
        } else {
          current = next;
        }
        while (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_DOT_OP) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode)result;
          } else {
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode)result;
      }
    }
    */
    /*
    public virtual void RemoveReference (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference param)
    {
      throw new NotImplementedException ("RemoveReference");
    }
    */
    /*
    public virtual void RemoveReferencesNode (JetBrains.ReSharper.Psi.FSharp.Tree.IIdReferenceNode param)
    {
      throw new NotImplementedException ("RemoveReferencesNode");
    }
    */
    JetBrains.ReSharper.Psi.FSharp.IQualifiedIdReferenceNode JetBrains.ReSharper.Psi.FSharp.IQualifiedIdReference.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.IValueReferenceExpressionOldNode JetBrains.ReSharper.Psi.FSharp.IValueReferenceExpressionOld.ToTreeNode() { return this; }
    public override string ToString() {
      return "IQualifiedIdReference";
    }
  }
}
