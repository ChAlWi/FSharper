//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal abstract partial class UnderlineTypeStub : TypeExpressionBase, JetBrains.ReSharper.Psi.FSharp.Tree.IUnderlineTypeNode, JetBrains.ReSharper.Psi.FSharp.Tree.IUnderlineType {
    public const short FSHARP_UNDERLINE= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_UNDERLINE;
    public UnderlineTypeStub() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.UNDERLINE_TYPE; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitUnderlineType(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitUnderlineType(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitUnderlineTypeNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitUnderlineTypeNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitUnderlineTypeNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_UNDERLINE_OP, FSHARP_UNDERLINE),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode Underline {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_UNDERLINE); }
    }
    JetBrains.ReSharper.Psi.FSharp.Tree.IUnderlineTypeNode JetBrains.ReSharper.Psi.FSharp.Tree.IUnderlineType.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.ITypeInformationNode JetBrains.ReSharper.Psi.FSharp.ITypeInformation.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.ITypeSchemeExpressionNode JetBrains.ReSharper.Psi.FSharp.ITypeSchemeExpression.ToTreeNode() { return this; }
    public override string ToString() {
      return "IUnderlineType";
    }
  }
}
