//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal partial class RangePattern : PatternBase, JetBrains.ReSharper.Psi.FSharp.IRangePatternNode, JetBrains.ReSharper.Psi.FSharp.IRangePattern {
    public const short LOWER_BOUND= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 1;
    public const short FSHARP_DOTDOT= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_DOTDOT;
    public const short UPPER_BOUND= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 3;
    internal RangePattern() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.RANGE_PATTERN; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitRangePattern(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitRangePattern(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitRangePatternNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitRangePatternNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitRangePatternNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_DOTDOT_OP, FSHARP_DOTDOT),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      short role = CHILD_ROLES[child.NodeType];
      if (role != 0) return role;
      JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement current = GetNextFilteredChild(null);
      if (current == null) return 0;
      if (child.parent != this) return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.CHARACTER_LITERAL) {
        if (current == child) return LOWER_BOUND;
        current = GetNextFilteredChild(current);
        if (current == null) return 0;
      } else return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_DOTDOT_OP) {
        if (current == child) return FSHARP_DOTDOT;
        current = GetNextFilteredChild(current);
        if (current == null) return 0;
      } else return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.CHARACTER_LITERAL) {
        if (current == child) return UPPER_BOUND;
        current = GetNextFilteredChild(current);
        if (current == null) return 0;
      } else return 0;
      return 0;
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode DotDot {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_DOTDOT); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode LowerBound {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(LOWER_BOUND); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode UpperBound {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(UPPER_BOUND); }
    }
    JetBrains.ReSharper.Psi.FSharp.IRangePatternNode JetBrains.ReSharper.Psi.FSharp.IRangePattern.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode JetBrains.ReSharper.Psi.FSharp.Tree.IPattern.ToTreeNode() { return this; }
    public override string ToString() {
      return "IRangePattern";
    }
  }
}
