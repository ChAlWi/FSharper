//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal partial class RecordPattern : PatternBase, JetBrains.ReSharper.Psi.FSharp.IRecordPatternNode, JetBrains.ReSharper.Psi.FSharp.IRecordPattern {
    public const short FSAHRP_LBRACE= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 1;
    public const short FIELD_PATTERNS= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 2;
    public const short FSAHRP_RBRACE= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 3;
    internal RecordPattern() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.RECORD_PATTERN; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitRecordPattern(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitRecordPattern(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitRecordPatternNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitRecordPatternNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitRecordPatternNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.FIELD_PATTERN_LIST, FIELD_PATTERNS),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_RBRACE_OP, FSAHRP_RBRACE),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LBRACE_OP, FSAHRP_LBRACE),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.IFieldPatternListNode FieldPatternList {
      get { return (JetBrains.ReSharper.Psi.FSharp.IFieldPatternListNode) FindChildByRole(FIELD_PATTERNS); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode LBrace {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSAHRP_LBRACE); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode RBrace {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSAHRP_RBRACE); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IFieldPattern>  FieldPatterns {
      get
      {
        CompositeElement current = this;  
    
        var result = JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IFieldPattern>.Empty;
        CompositeElement current0 = (CompositeElement)current.FindChildByRole (JetBrains.ReSharper.Psi.FSharp.Impl.Tree.RecordPattern.FIELD_PATTERNS);
        if (current0 != null) {
          result = ((CompositeElement)current0).FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.IFieldPattern> (JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FieldPatternList.FIELD_PATTERN);
        }
        return result;
      }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.IFieldPatternListNode SetFieldPatternList (JetBrains.ReSharper.Psi.FSharp.IFieldPatternListNode param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IFieldPatternListNode)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LBRACE_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.IFieldPatternListNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.FIELD_PATTERN_LIST) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.IFieldPatternListNode)result;
      }
    }
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IFieldPattern AddFieldPatternBefore (JetBrains.ReSharper.Psi.FSharp.IFieldPattern param, JetBrains.ReSharper.Psi.FSharp.IFieldPattern anchor)
    {
      throw new NotImplementedException ("AddFieldPatternBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.IFieldPattern)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IFieldPattern AddFieldPatternAfter (JetBrains.ReSharper.Psi.FSharp.IFieldPattern param, JetBrains.ReSharper.Psi.FSharp.IFieldPattern anchor)
    {
      throw new NotImplementedException ("AddFieldPatternAfter");
      throw new NotImplementedException ("AddFieldPatternAfter");
    }
    */
    /*
    public virtual void RemoveFieldPattern (JetBrains.ReSharper.Psi.FSharp.IFieldPattern param)
    {
      throw new NotImplementedException ("RemoveFieldPattern");
    }
    */
    JetBrains.ReSharper.Psi.FSharp.IRecordPatternNode JetBrains.ReSharper.Psi.FSharp.IRecordPattern.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode JetBrains.ReSharper.Psi.FSharp.Tree.IPattern.ToTreeNode() { return this; }
    public override string ToString() {
      return "IRecordPattern";
    }
  }
}
