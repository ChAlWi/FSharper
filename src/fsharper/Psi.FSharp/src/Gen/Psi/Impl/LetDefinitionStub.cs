//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal abstract partial class LetDefinitionStub : TypeVariableScopeBase, JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode, JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinition {
    public const short FSHARP_LET= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_LET;
    public const short FSHARP_REC= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_REC;
    public const short FSHARP_INLINE= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_INLINE;
    public const short BINDING_SCHEME= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 4;
    public const short FSHARP_AND= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_AND;
    public LetDefinitionStub() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.LET_DEFINITION; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitLetDefinition(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitLetDefinition(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitLetDefinitionNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitLetDefinitionNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitLetDefinitionNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING, BINDING_SCHEME),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.DO_EXPRESSION, BINDING_SCHEME),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_INLINE, FSHARP_INLINE),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_REC, FSHARP_REC),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LET, FSHARP_LET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_AND, FSHARP_AND),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> AndKeyword {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.ITokenNode>(FSHARP_AND); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IBindingScheme> BindingSchemes {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.IBindingScheme>(BINDING_SCHEME); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode> BindingSchemesNode {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode>(BINDING_SCHEME); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode InlineKeyword {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_INLINE); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode LetKeyword {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_LET); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode RecKeyword {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_REC); }
    }
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IBindingScheme AddBindingSchemeBefore (JetBrains.ReSharper.Psi.FSharp.IBindingScheme param, JetBrains.ReSharper.Psi.FSharp.IBindingScheme anchor)
    {
      throw new NotImplementedException ("AddBindingSchemeBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode AddBindingSchemesNodeBefore (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode param, JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode anchor)
    {
      throw new NotImplementedException ("AddBindingSchemesNodeBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IBindingScheme AddBindingSchemeAfter (JetBrains.ReSharper.Psi.FSharp.IBindingScheme param, JetBrains.ReSharper.Psi.FSharp.IBindingScheme anchor)
    {
      throw new NotImplementedException ("AddBindingSchemeAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
        } else {
          current = next;
        }
        next = GetNextFilteredChild (current);
        if (next != null && (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_REC)) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
          } else {
            current = next;
          }
        }  
        next = GetNextFilteredChild (current);
        if (next != null && (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_INLINE)) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
          } else {
            current = next;
          }
        }  
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
        } else {
          current = next;
        }
        while (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_AND) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
          } else {
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode AddBindingSchemesNodeAfter (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode param, JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode anchor)
    {
      throw new NotImplementedException ("AddBindingSchemesNodeAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
        } else {
          current = next;
        }
        next = GetNextFilteredChild (current);
        if (next != null && (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_REC)) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
          } else {
            current = next;
          }
        }  
        next = GetNextFilteredChild (current);
        if (next != null && (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_INLINE)) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
          } else {
            current = next;
          }
        }  
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
        } else {
          current = next;
        }
        while (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_AND) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
          } else {
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
      }
    }
    */
    /*
    public virtual void RemoveBindingScheme (JetBrains.ReSharper.Psi.FSharp.IBindingScheme param)
    {
      throw new NotImplementedException ("RemoveBindingScheme");
    }
    */
    /*
    public virtual void RemoveBindingSchemesNode (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode param)
    {
      throw new NotImplementedException ("RemoveBindingSchemesNode");
    }
    */
    JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinitionNode JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinition.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.Tree.IDefinitionNode JetBrains.ReSharper.Psi.FSharp.Tree.IDefinition.ToTreeNode() { return this; }
    public override string ToString() {
      return "ILetDefinition";
    }
  }
}
