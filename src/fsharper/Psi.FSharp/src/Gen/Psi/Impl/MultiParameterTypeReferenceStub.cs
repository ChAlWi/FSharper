//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal abstract partial class MultiParameterTypeReferenceStub : JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpCompositeElement, JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReferenceNode, JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReference {
    public const short FSHARP_LPARENTH= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_LPARENTH;
    public const short PARAMETER= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 2;
    public const short FSHARP_COMMA= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_COMMA;
    public const short FSHARP_RPARENTH= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_RPARENTH;
    public const short TYPE_REFERENCE= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 7;
    public MultiParameterTypeReferenceStub() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.MULTI_PARAMETER_TYPE_REFERENCE; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitMultiParameterTypeReference(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitMultiParameterTypeReference(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitMultiParameterTypeReferenceNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitMultiParameterTypeReferenceNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitMultiParameterTypeReferenceNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ARRAY_TYPE, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.FUNCTION_TYPE, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.LAZY_TYPE, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.MULTI_PARAMETER_TYPE_REFERENCE, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ONE_PARAMETER_TYPE_REFERENCE, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.PARENTHESIZED_TYPE, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TUPLE_TYPE, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPE_PARAMETER_REFERENCE, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.UNDERLINE_TYPE, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.WITHOUT_PARAMETER_TYPE_REFERENCE, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPE_REFERENCE, TYPE_REFERENCE),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LPARENTH_OP, FSHARP_LPARENTH),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_RPARENTH_OP, FSHARP_RPARENTH),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_COMMA_OP, FSHARP_COMMA),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> Comma {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.ITokenNode>(FSHARP_COMMA); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode LParenth {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_LPARENTH); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression> Parameters {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression>(PARAMETER); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode> ParametersNode {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode>(PARAMETER); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode RParenth {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_RPARENTH); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference TypeReference {
      get { return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference) FindChildByRole(TYPE_REFERENCE); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode TypeReferenceNode {
      get { return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode) FindChildByRole(TYPE_REFERENCE); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference SetTypeReference (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LPARENTH_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
        } else {
          if (TokenBitsets.ElementBitset_2[next.NodeType]) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_COMMA_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
        } else {
          if (TokenBitsets.ElementBitset_2[next.NodeType]) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
          }
        }
        while (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_COMMA_OP) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
          } else {
            if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_COMMA_OP) {
              current = next;
            } else {
              return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
            }
          }
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
          } else {
            if (TokenBitsets.ElementBitset_2[next.NodeType]) {
              current = next;
            } else {
              return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
            }
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_RPARENTH_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPE_REFERENCE) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference)result;
      }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode SetTypeReferenceNode (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LPARENTH_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
        } else {
          if (TokenBitsets.ElementBitset_2[next.NodeType]) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_COMMA_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
        } else {
          if (TokenBitsets.ElementBitset_2[next.NodeType]) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
          }
        }
        while (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_COMMA_OP) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
          } else {
            if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_COMMA_OP) {
              current = next;
            } else {
              return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
            }
          }
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
          } else {
            if (TokenBitsets.ElementBitset_2[next.NodeType]) {
              current = next;
            } else {
              return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
            }
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_RPARENTH_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPE_REFERENCE) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReferenceNode)result;
      }
    }
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression AddParameterBefore (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression param, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression anchor)
    {
      throw new NotImplementedException ("AddParameterBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode AddParametersNodeBefore (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode param, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode anchor)
    {
      throw new NotImplementedException ("AddParametersNodeBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression AddParameterAfter (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression param, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression anchor)
    {
      throw new NotImplementedException ("AddParameterAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode AddParametersNodeAfter (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode param, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode anchor)
    {
      throw new NotImplementedException ("AddParametersNodeAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)result;
      }
    }
    */
    /*
    public virtual void RemoveParameter (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression param)
    {
      throw new NotImplementedException ("RemoveParameter");
    }
    */
    /*
    public virtual void RemoveParametersNode (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode param)
    {
      throw new NotImplementedException ("RemoveParametersNode");
    }
    */
    JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReferenceNode JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReference.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.Tree.IParameterizedTypeReferenceNode JetBrains.ReSharper.Psi.FSharp.Tree.IParameterizedTypeReference.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.ITypeInformationNode JetBrains.ReSharper.Psi.FSharp.ITypeInformation.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.ITypeSchemeExpressionNode JetBrains.ReSharper.Psi.FSharp.ITypeSchemeExpression.ToTreeNode() { return this; }
    public override string ToString() {
      return "IMultiParameterTypeReference";
    }
  }
}
