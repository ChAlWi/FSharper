//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal partial class AlgebraicTypeRepresentation : JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpCompositeElement, JetBrains.ReSharper.Psi.FSharp.IAlgebraicTypeRepresentationNode, JetBrains.ReSharper.Psi.FSharp.IAlgebraicTypeRepresentation {
    public const short FSHARP_OR= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_OR;
    public const short CONSTRUCTOR= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 2;
    internal AlgebraicTypeRepresentation() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ALGEBRAIC_TYPE_REPRESENTATION; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitAlgebraicTypeRepresentation(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitAlgebraicTypeRepresentation(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitAlgebraicTypeRepresentationNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitAlgebraicTypeRepresentationNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitAlgebraicTypeRepresentationNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.CONSTRUCTOR_DECLARATION, CONSTRUCTOR),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_OR_OP, FSHARP_OR),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration> Constructors {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration>(CONSTRUCTOR); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode> ConstructorsNode {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode>(CONSTRUCTOR); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> Or {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.ITokenNode>(FSHARP_OR); }
    }
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration AddConstructorBefore (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration param, JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration anchor)
    {
      throw new NotImplementedException ("AddConstructorBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode AddConstructorsNodeBefore (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode param, JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode anchor)
    {
      throw new NotImplementedException ("AddConstructorsNodeBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration AddConstructorAfter (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration param, JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration anchor)
    {
      throw new NotImplementedException ("AddConstructorAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        next = GetNextFilteredChild (current);
        if (next != null && (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_OR_OP)) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration)result;
          } else {
            current = next;
          }
        }  
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration)result;
        } else {
          current = next;
        }
        while (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_OR_OP) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration)result;
          } else {
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode AddConstructorsNodeAfter (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode param, JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode anchor)
    {
      throw new NotImplementedException ("AddConstructorsNodeAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        next = GetNextFilteredChild (current);
        if (next != null && (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_OR_OP)) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode)result;
          } else {
            current = next;
          }
        }  
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode)result;
        } else {
          current = next;
        }
        while (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_OR_OP) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode)result;
          } else {
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode)result;
      }
    }
    */
    /*
    public virtual void RemoveConstructor (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration param)
    {
      throw new NotImplementedException ("RemoveConstructor");
    }
    */
    /*
    public virtual void RemoveConstructorsNode (JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclarationNode param)
    {
      throw new NotImplementedException ("RemoveConstructorsNode");
    }
    */
    JetBrains.ReSharper.Psi.FSharp.IAlgebraicTypeRepresentationNode JetBrains.ReSharper.Psi.FSharp.IAlgebraicTypeRepresentation.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.ITypeRepresentationNode JetBrains.ReSharper.Psi.FSharp.ITypeRepresentation.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.ITypeInformationNode JetBrains.ReSharper.Psi.FSharp.ITypeInformation.ToTreeNode() { return this; }
    public override string ToString() {
      return "IAlgebraicTypeRepresentation";
    }
  }
}
