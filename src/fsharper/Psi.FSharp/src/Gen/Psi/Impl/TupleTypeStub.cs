//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal abstract partial class TupleTypeStub : TypeExpressionBase, JetBrains.ReSharper.Psi.FSharp.Tree.ITupleTypeNode, JetBrains.ReSharper.Psi.FSharp.Tree.ITupleType {
    public const short TYPE_EXPRESSION= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 1;
    public const short FSHARP_ASTERISK= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_ASTERISK;
    public TupleTypeStub() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TUPLE_TYPE; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitTupleType(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitTupleType(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitTupleTypeNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitTupleTypeNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitTupleTypeNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ARRAY_TYPE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.FUNCTION_TYPE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.LAZY_TYPE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.MULTI_PARAMETER_TYPE_REFERENCE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ONE_PARAMETER_TYPE_REFERENCE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.PARENTHESIZED_TYPE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TUPLE_TYPE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPE_PARAMETER_REFERENCE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.UNDERLINE_TYPE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.WITHOUT_PARAMETER_TYPE_REFERENCE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_ASTERISK_OP, FSHARP_ASTERISK),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> Asterisk {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.ITokenNode>(FSHARP_ASTERISK); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression> TypeExpression {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression>(TYPE_EXPRESSION); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode> TypeExpressionNode {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode>(TYPE_EXPRESSION); }
    }
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression AddTypeExpressionBefore (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression param, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression anchor)
    {
      throw new NotImplementedException ("AddTypeExpressionBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode AddTypeExpressionNodeBefore (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode param, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode anchor)
    {
      throw new NotImplementedException ("AddTypeExpressionNodeBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression AddTypeExpressionAfter (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression param, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression anchor)
    {
      throw new NotImplementedException ("AddTypeExpressionAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode AddTypeExpressionNodeAfter (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode param, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode anchor)
    {
      throw new NotImplementedException ("AddTypeExpressionNodeAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)result;
      }
    }
    */
    /*
    public virtual void RemoveTypeExpression (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression param)
    {
      throw new NotImplementedException ("RemoveTypeExpression");
    }
    */
    /*
    public virtual void RemoveTypeExpressionNode (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode param)
    {
      throw new NotImplementedException ("RemoveTypeExpressionNode");
    }
    */
    JetBrains.ReSharper.Psi.FSharp.Tree.ITupleTypeNode JetBrains.ReSharper.Psi.FSharp.Tree.ITupleType.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.ITypeInformationNode JetBrains.ReSharper.Psi.FSharp.ITypeInformation.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.ITypeSchemeExpressionNode JetBrains.ReSharper.Psi.FSharp.ITypeSchemeExpression.ToTreeNode() { return this; }
    public override string ToString() {
      return "ITupleType";
    }
  }
}
