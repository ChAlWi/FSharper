//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal partial class InterfaceUnit : JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpCompositeElement, JetBrains.ReSharper.Psi.FSharp.IInterfaceUnitNode {
    public const short DECLARATION= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 1;
    public const short FSHARP_SEMICOLONSEMICOLON= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_SEMICOLONSEMICOLON;
    internal InterfaceUnit() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.INTERFACE_UNIT; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitInterfaceUnitNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitInterfaceUnitNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitInterfaceUnitNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.EXCEPTION_ALIAS, DECLARATION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.EXCEPTION_DECLARATION, DECLARATION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.OPEN_MODULE_DEFINITION, DECLARATION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPE_DEFINITION, DECLARATION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.VALUE_SPECIFICATION, DECLARATION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_SEMICOLONSEMICOLON_OP, FSHARP_SEMICOLONSEMICOLON),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.ISpecificationNode> Declarations {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.ISpecificationNode>(DECLARATION); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> SemicolonSemicolon {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.ITokenNode>(FSHARP_SEMICOLONSEMICOLON); }
    }
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.ISpecificationNode AddDeclarationBefore (JetBrains.ReSharper.Psi.FSharp.ISpecificationNode param, JetBrains.ReSharper.Psi.FSharp.ISpecificationNode anchor)
    {
      throw new NotImplementedException ("AddDeclarationBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.ISpecificationNode)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.ISpecificationNode AddDeclarationAfter (JetBrains.ReSharper.Psi.FSharp.ISpecificationNode param, JetBrains.ReSharper.Psi.FSharp.ISpecificationNode anchor)
    {
      throw new NotImplementedException ("AddDeclarationAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        if (anchor == null) {
          childToAddAfter = current;
          result = childToAddAfter = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, childToAddAfter, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
          childToAddAfter = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, childToAddAfter, TreeElementFactory.CreateTreeElement (JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_SEMICOLONSEMICOLON_OP));
          return (JetBrains.ReSharper.Psi.FSharp.ISpecificationNode)result;
        }
        next = GetNextFilteredChild (current);
        while(next != null && (TokenBitsets.ElementBitset_6[next.NodeType])) {
          next = GetNextFilteredChild (current);
          if (anchor == next) {
            result = childToAddAfter = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, childToAddAfter, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            childToAddAfter = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, childToAddAfter, TreeElementFactory.CreateTreeElement (JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_SEMICOLONSEMICOLON_OP));
            return (JetBrains.ReSharper.Psi.FSharp.ISpecificationNode)result;
          }
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.ISpecificationNode)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
          if (next != null && (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_SEMICOLONSEMICOLON_OP)) {
            next = GetNextFilteredChild (current);
            childToAddAfter = next;
            if (next == null) {
              return (JetBrains.ReSharper.Psi.FSharp.ISpecificationNode)result;
            } else {
              current = next;
            }
          }  
          next = GetNextFilteredChild (current);
        }
        return (JetBrains.ReSharper.Psi.FSharp.ISpecificationNode)result;
      }
    }
    */
    /*
    public virtual void RemoveDeclaration (JetBrains.ReSharper.Psi.FSharp.ISpecificationNode param)
    {
      throw new NotImplementedException ("RemoveDeclaration");
    }
    */
    public override string ToString() {
      return "IInterfaceUnit";
    }
  }
}
