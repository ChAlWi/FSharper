//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal partial class TypeParameterList : JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpCompositeElement, JetBrains.ReSharper.Psi.FSharp.ITypeParameterListNode, JetBrains.ReSharper.Psi.FSharp.ITypeParameterList {
    public const short FSHARP_LPARENTH= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_LPARENTH;
    public const short PARAMETER_DECLARATION= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 2;
    public const short FSHARP_COMMA= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_COMMA;
    public const short FSHARP_RPARENTH= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_RPARENTH;
    internal TypeParameterList() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPE_PARAMETER_LIST; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitTypeParameterList(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitTypeParameterList(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitTypeParameterListNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitTypeParameterListNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitTypeParameterListNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LPARENTH_OP, FSHARP_LPARENTH),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_COMMA_OP, FSHARP_COMMA),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_RPARENTH_OP, FSHARP_RPARENTH),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPE_PARAMETER_DECLARATION, PARAMETER_DECLARATION),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> Comma {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.ITokenNode>(FSHARP_COMMA); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode LParenth {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_LPARENTH); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode> ParameterDeclarations {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode>(PARAMETER_DECLARATION); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode RParenth {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_RPARENTH); }
    }
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode AddParameterDeclarationBefore (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode param, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode anchor)
    {
      throw new NotImplementedException ("AddParameterDeclarationBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode AddParameterDeclarationAfter (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode param, JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode anchor)
    {
      throw new NotImplementedException ("AddParameterDeclarationAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode)result;
      }
    }
    */
    /*
    public virtual void RemoveParameterDeclaration (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclarationNode param)
    {
      throw new NotImplementedException ("RemoveParameterDeclaration");
    }
    */
    JetBrains.ReSharper.Psi.FSharp.ITypeParameterListNode JetBrains.ReSharper.Psi.FSharp.ITypeParameterList.ToTreeNode() { return this; }
    public override string ToString() {
      return "ITypeParameterList";
    }
  }
}
