//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal partial class RecordTypeRepresentation : JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpCompositeElement, JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentationNode, JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentation {
    public const short FSHARP_LBRACE= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_LBRACE;
    public const short FIELD_DECLARATIONS= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 2;
    public const short FSHARP_RBRACE= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_RBRACE;
    internal RecordTypeRepresentation() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.RECORD_TYPE_REPRESENTATION; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitRecordTypeRepresentation(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitRecordTypeRepresentation(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitRecordTypeRepresentationNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitRecordTypeRepresentationNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitRecordTypeRepresentationNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.FIELD_DECLARATION_LIST, FIELD_DECLARATIONS),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_RBRACE_OP, FSHARP_RBRACE),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LBRACE_OP, FSHARP_LBRACE),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationList FieldDeclarationList {
      get { return (JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationList) FindChildByRole(FIELD_DECLARATIONS); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode FieldDeclarationListNode {
      get { return (JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode) FindChildByRole(FIELD_DECLARATIONS); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode LBrace {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_LBRACE); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode RBrace {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_RBRACE); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration>  FieldDeclarations {
      get
      {
        CompositeElement current = this;  
    
        var result = JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration>.Empty;
        CompositeElement current0 = (CompositeElement)current.FindChildByRole (JetBrains.ReSharper.Psi.FSharp.Impl.Tree.RecordTypeRepresentation.FIELD_DECLARATIONS);
        if (current0 != null) {
          result = ((CompositeElement)current0).FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration> (JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FieldDeclarationList.FIELD_DECLARATION);
        }
        return result;
      }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationList SetFieldDeclarationList (JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationList param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationList)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LBRACE_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationList)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.FIELD_DECLARATION_LIST) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationList)result;
      }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode SetFieldDeclarationListNode (JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LBRACE_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.FIELD_DECLARATION_LIST) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationListNode)result;
      }
    }
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration AddFieldDeclarationBefore (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration param, JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration anchor)
    {
      throw new NotImplementedException ("AddFieldDeclarationBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration AddFieldDeclarationAfter (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration param, JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration anchor)
    {
      throw new NotImplementedException ("AddFieldDeclarationAfter");
      throw new NotImplementedException ("AddFieldDeclarationAfter");
    }
    */
    /*
    public virtual void RemoveFieldDeclaration (JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration param)
    {
      throw new NotImplementedException ("RemoveFieldDeclaration");
    }
    */
    JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentationNode JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentation.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.ITypeRepresentationNode JetBrains.ReSharper.Psi.FSharp.ITypeRepresentation.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.ITypeInformationNode JetBrains.ReSharper.Psi.FSharp.ITypeInformation.ToTreeNode() { return this; }
    public override string ToString() {
      return "IRecordTypeRepresentation";
    }
  }
}
