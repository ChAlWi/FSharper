//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal abstract partial class BindingStub : JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpCompositeElement, JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode, JetBrains.ReSharper.Psi.FSharp.Tree.IBinding {
    public const short ATTRIBUTE= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 1;
    public const short SOURCE= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 2;
    public const short FSHARP_EQ= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_EQ;
    public const short TARGET= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 4;
    public BindingStub() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitBinding(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitBinding(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitBindingNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitBindingNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitBindingNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.AND_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.APPLICATION_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ARRAY_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ASSERT_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ASSIGN_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ASSIGN_FIELD_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINARY_ADD_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINARY_MULT_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINARY_POWER_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BRACKETED_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BRACKETED_FIELD_VALUE_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.COMPARISON_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.CONSTANT_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.CREATION_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.CREATION_WITH_OVERRIDING_METHODS_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.DOWNCAST_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.DOWNCAST_EXPRESSION_TO_TYPE, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.EXPRESSION_BLOCK, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.EXPRESSION_SEQUENCE, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.FOR_STATEMENT_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.FUN_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.FUNCTION_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.IF_STATEMENT_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.INFIX_OPERATOR_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.LAZY_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.LIST_CONCATENATE_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.LIST_CONSTRUCTOR_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.LOCAL_DECLARATIONS_IN_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.MATCH_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.MEMBER_ACCESS_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.OR_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.PARENTHESIZED_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.PARENTHESIZED_FIELD_VALUE_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.PREFIX_OPERATOR_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.RECORD_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.STRING_CONCATENATE_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TRY_FINALLY_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TRY_WITH_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TUPLE_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPE_TEST_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPED_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.UNARY_MINUS_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.UPCAST_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.UPCAST_EXPRESSION_TO_TYPE, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.VALUE_REFERENCE_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.WHILE_STATEMENT_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.WITH_RECORD_EXPRESSION, TARGET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_EQ_OP, FSHARP_EQ),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE, ATTRIBUTE),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING_PATTERN, SOURCE),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING_VALUE, SOURCE),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.MUTABLE_BINDING_VALUE, SOURCE),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IAttribute> Attributes {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.IAttribute>(ATTRIBUTE); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IAttributeNode> AttributesNode {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.IAttributeNode>(ATTRIBUTE); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode Eq {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_EQ); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSource Source {
      get { return (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSource) FindChildByRole(SOURCE); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSourceNode SourceNode {
      get { return (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSourceNode) FindChildByRole(SOURCE); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IExpression Target {
      get { return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpression) FindChildByRole(TARGET); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode TargetNode {
      get { return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode) FindChildByRole(TARGET); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSource SetSource (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSource param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        while(next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSource)result;
          } else {
            if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE) {
              current = next;
            } else {
              return (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSource)result;
            }
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING_PATTERN
            ||next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.MUTABLE_BINDING_VALUE
            ||next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING_VALUE) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSource)result;
      }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSourceNode SetSourceNode (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSourceNode param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        while(next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSourceNode)result;
          } else {
            if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE) {
              current = next;
            } else {
              return (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSourceNode)result;
            }
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING_PATTERN
            ||next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.MUTABLE_BINDING_VALUE
            ||next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING_VALUE) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSourceNode)result;
      }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IExpression SetTarget (JetBrains.ReSharper.Psi.FSharp.Tree.IExpression param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        while(next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpression)result;
          } else {
            if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE) {
              current = next;
            } else {
              return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpression)result;
            }
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpression)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING_PATTERN
            ||next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.MUTABLE_BINDING_VALUE
            ||next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING_VALUE) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpression)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpression)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_EQ_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpression)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (TokenBitsets.ElementBitset_0[next.NodeType]) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpression)result;
      }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode SetTargetNode (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        while(next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)result;
          } else {
            if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE) {
              current = next;
            } else {
              return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)result;
            }
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING_PATTERN
            ||next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.MUTABLE_BINDING_VALUE
            ||next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING_VALUE) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_EQ_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (TokenBitsets.ElementBitset_0[next.NodeType]) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode)result;
      }
    }
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IAttribute AddAttributeBefore (JetBrains.ReSharper.Psi.FSharp.IAttribute param, JetBrains.ReSharper.Psi.FSharp.IAttribute anchor)
    {
      throw new NotImplementedException ("AddAttributeBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.IAttribute)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IAttributeNode AddAttributesNodeBefore (JetBrains.ReSharper.Psi.FSharp.IAttributeNode param, JetBrains.ReSharper.Psi.FSharp.IAttributeNode anchor)
    {
      throw new NotImplementedException ("AddAttributesNodeBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.IAttributeNode)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IAttribute AddAttributeAfter (JetBrains.ReSharper.Psi.FSharp.IAttribute param, JetBrains.ReSharper.Psi.FSharp.IAttribute anchor)
    {
      throw new NotImplementedException ("AddAttributeAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        if (anchor == null) {
          childToAddAfter = current;
          result = childToAddAfter = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, childToAddAfter, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
          return (JetBrains.ReSharper.Psi.FSharp.IAttribute)result;
        }
        next = GetNextFilteredChild (current);
        while(next != null && (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE)) {
          next = GetNextFilteredChild (current);
          childToAddAfter = next;
          if (anchor == next) {
            result = childToAddAfter = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, childToAddAfter, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            return (JetBrains.ReSharper.Psi.FSharp.IAttribute)result;
          }
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IAttribute)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
        }
        return (JetBrains.ReSharper.Psi.FSharp.IAttribute)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IAttributeNode AddAttributesNodeAfter (JetBrains.ReSharper.Psi.FSharp.IAttributeNode param, JetBrains.ReSharper.Psi.FSharp.IAttributeNode anchor)
    {
      throw new NotImplementedException ("AddAttributesNodeAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        if (anchor == null) {
          childToAddAfter = current;
          result = childToAddAfter = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, childToAddAfter, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
          return (JetBrains.ReSharper.Psi.FSharp.IAttributeNode)result;
        }
        next = GetNextFilteredChild (current);
        while(next != null && (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE)) {
          next = GetNextFilteredChild (current);
          childToAddAfter = next;
          if (anchor == next) {
            result = childToAddAfter = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, childToAddAfter, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            return (JetBrains.ReSharper.Psi.FSharp.IAttributeNode)result;
          }
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IAttributeNode)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
        }
        return (JetBrains.ReSharper.Psi.FSharp.IAttributeNode)result;
      }
    }
    */
    /*
    public virtual void RemoveAttribute (JetBrains.ReSharper.Psi.FSharp.IAttribute param)
    {
      throw new NotImplementedException ("RemoveAttribute");
    }
    */
    /*
    public virtual void RemoveAttributesNode (JetBrains.ReSharper.Psi.FSharp.IAttributeNode param)
    {
      throw new NotImplementedException ("RemoveAttributesNode");
    }
    */
    JetBrains.ReSharper.Psi.FSharp.Tree.IBindingNode JetBrains.ReSharper.Psi.FSharp.Tree.IBinding.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode JetBrains.ReSharper.Psi.FSharp.IBindingScheme.ToTreeNode() { return this; }
    public override string ToString() {
      return "IBinding";
    }
  }
}
