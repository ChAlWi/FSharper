//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal partial class CreationWithOverridingMethodsExpression : ExpressionBase, JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpressionNode, JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpression {
    public const short FSAHRP_LBRACE= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 1;
    public const short CREATION_EXPRESSION= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 2;
    public const short WITH_KEYWORD= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 3;
    public const short BINDING_SCHEME= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 4;
    public const short AND_KEYWORD= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 5;
    public const short FSAHRP_RBRACE= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 6;
    internal CreationWithOverridingMethodsExpression() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.CREATION_WITH_OVERRIDING_METHODS_EXPRESSION; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitCreationWithOverridingMethodsExpression(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitCreationWithOverridingMethodsExpression(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitCreationWithOverridingMethodsExpressionNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitCreationWithOverridingMethodsExpressionNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitCreationWithOverridingMethodsExpressionNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_WITH, WITH_KEYWORD),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.CREATION_EXPRESSION, CREATION_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING, BINDING_SCHEME),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.DO_EXPRESSION, BINDING_SCHEME),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_RBRACE_OP, FSAHRP_RBRACE),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LBRACE_OP, FSAHRP_LBRACE),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_AND, AND_KEYWORD),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.ITokenNode> AndKeyword {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.ITokenNode>(AND_KEYWORD); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IBindingScheme> BindingSchemes {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.IBindingScheme>(BINDING_SCHEME); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode> BindingSchemesNode {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode>(BINDING_SCHEME); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.ICreationExpression CreationExpression {
      get { return (JetBrains.ReSharper.Psi.FSharp.ICreationExpression) FindChildByRole(CREATION_EXPRESSION); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode CreationExpressionNode {
      get { return (JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode) FindChildByRole(CREATION_EXPRESSION); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode LBrace {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSAHRP_LBRACE); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode RBrace {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSAHRP_RBRACE); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode WithKeyword {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(WITH_KEYWORD); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.ICreationExpression SetCreationExpression (JetBrains.ReSharper.Psi.FSharp.ICreationExpression param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.ICreationExpression)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LBRACE_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.ICreationExpression)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.CREATION_EXPRESSION) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.ICreationExpression)result;
      }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode SetCreationExpressionNode (JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LBRACE_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.CREATION_EXPRESSION) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.ICreationExpressionNode)result;
      }
    }
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IBindingScheme AddBindingSchemeBefore (JetBrains.ReSharper.Psi.FSharp.IBindingScheme param, JetBrains.ReSharper.Psi.FSharp.IBindingScheme anchor)
    {
      throw new NotImplementedException ("AddBindingSchemeBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode AddBindingSchemesNodeBefore (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode param, JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode anchor)
    {
      throw new NotImplementedException ("AddBindingSchemesNodeBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IBindingScheme AddBindingSchemeAfter (JetBrains.ReSharper.Psi.FSharp.IBindingScheme param, JetBrains.ReSharper.Psi.FSharp.IBindingScheme anchor)
    {
      throw new NotImplementedException ("AddBindingSchemeAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
        } else {
          current = next;
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
        } else {
          current = next;
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
        } else {
          current = next;
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
        } else {
          current = next;
        }
        while (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_AND) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
          } else {
            current = next;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
        } else {
          current = next;
        }
        return (JetBrains.ReSharper.Psi.FSharp.IBindingScheme)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode AddBindingSchemesNodeAfter (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode param, JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode anchor)
    {
      throw new NotImplementedException ("AddBindingSchemesNodeAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
        } else {
          current = next;
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
        } else {
          current = next;
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
        } else {
          current = next;
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
        } else {
          current = next;
        }
        while (current.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_AND) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
          } else {
            current = next;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
        } else {
          current = next;
        }
        return (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode)result;
      }
    }
    */
    /*
    public virtual void RemoveBindingScheme (JetBrains.ReSharper.Psi.FSharp.IBindingScheme param)
    {
      throw new NotImplementedException ("RemoveBindingScheme");
    }
    */
    /*
    public virtual void RemoveBindingSchemesNode (JetBrains.ReSharper.Psi.FSharp.IBindingSchemeNode param)
    {
      throw new NotImplementedException ("RemoveBindingSchemesNode");
    }
    */
    JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpressionNode JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpression.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.Tree.IExpressionNode JetBrains.ReSharper.Psi.FSharp.Tree.IExpression.ToTreeNode() { return this; }
    public override string ToString() {
      return "ICreationWithOverridingMethodsExpression";
    }
  }
}
