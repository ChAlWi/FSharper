//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal partial class Attribute : JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpCompositeElement, JetBrains.ReSharper.Psi.FSharp.IAttributeNode, JetBrains.ReSharper.Psi.FSharp.IAttribute {
    public const short FSHARP_LBRACKETLT= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_LBRACKETLT;
    public const short FSHARP_LPARENT= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_LPARENT;
    public const short ARGUMENT_LIST= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 3;
    public const short FSHARP_RPARENTH= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_RPARENTH;
    public const short FSHARP_GTRBRACKET= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_GTRBRACKET;
    internal Attribute() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitAttribute(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitAttribute(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitAttributeNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitAttributeNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitAttributeNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_GTRBRACKET_OP, FSHARP_GTRBRACKET),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LPARENTH_OP, FSHARP_LPARENT),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_RPARENTH_OP, FSHARP_RPARENTH),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LBRACKETLT_OP, FSHARP_LBRACKETLT),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TUPLE_EXPRESSION, ARGUMENT_LIST),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode ArgumentList {
      get { return (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode) FindChildByRole(ARGUMENT_LIST); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode GtRBracet {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_GTRBRACKET); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode LBracetLt {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_LBRACKETLT); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode LParenth {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_LPARENT); }
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode RParenth {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_RPARENTH); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode SetArgumentList (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LBRACKETLT_OP) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ATTRIBUTE_REFERENCE) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_LPARENTH_OP) {
            if (param != null) {
              current = next;
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TUPLE_EXPRESSION) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_RPARENTH_OP) {
            if (param != null) {
              current = next;
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)result;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.ITupleExpressionNode)result;
      }
    }
    JetBrains.ReSharper.Psi.FSharp.IAttributeNode JetBrains.ReSharper.Psi.FSharp.IAttribute.ToTreeNode() { return this; }
    public override string ToString() {
      return "IAttribute";
    }
  }
}
