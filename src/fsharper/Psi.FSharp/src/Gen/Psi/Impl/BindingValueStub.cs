//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.FSharp;
namespace JetBrains.ReSharper.Psi.FSharp.Impl.Tree {
  internal abstract partial class BindingValueStub : JetBrains.ReSharper.Psi.FSharp.Impl.InferenceCacheSupport.InferenceErrorBase, JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValueNode, JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValue {
    public const short NAME= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 1;
    public const short PARAMETER= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 2;
    public const short FSHARP_COLON= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.FSHARP_COLON;
    public const short TYPE_EXPRESSION= JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpChildRole.LAST + 4;
    public BindingValueStub() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BINDING_VALUE; }
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.ElementVisitor visitor) {
      visitor.VisitBindingValue(this);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.ElementVisitor<TContext,TReturn> visitor, TContext context) {
      return visitor.VisitBindingValue(this, context);
    }
    public override void Accept(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor visitor) {
      visitor.VisitBindingValueNode(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitBindingValueNode(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitBindingValueNode(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ARRAY_TYPE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.FUNCTION_TYPE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.LAZY_TYPE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.MULTI_PARAMETER_TYPE_REFERENCE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ONE_PARAMETER_TYPE_REFERENCE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.PARENTHESIZED_TYPE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TUPLE_TYPE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPE_PARAMETER_REFERENCE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.UNDERLINE_TYPE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.WITHOUT_PARAMETER_TYPE_REFERENCE, TYPE_EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType._IDENTIFIER, NAME),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.OPERATOR_NAME, NAME),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.ARRAY_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.AS_VALUE_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.BRACKETED_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.CONSTANT_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.CONSTRUCTOR_REFERENCE, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.DISJUNCTION_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.LIST_CONSTRUCTOR_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.PARAMETERIZED_CONSTRUCTOR_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.PARENTHESIZED_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.RANGE_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.RECORD_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TUPLE_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPE_TEST_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.TYPED_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.UNDERLINE_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.VALUE_DECLARATION_PATTERN, PARAMETER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_COLON_OP, FSHARP_COLON),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public virtual JetBrains.ReSharper.Psi.ITokenNode Colon {
      get { return (JetBrains.ReSharper.Psi.ITokenNode) FindChildByRole(FSHARP_COLON); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPattern> Parameters {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.Tree.IPattern>(PARAMETER); }
    }
    public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode> ParametersNode {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode>(PARAMETER); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression TypeExpression {
      get { return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression) FindChildByRole(TYPE_EXPRESSION); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode TypeExpressionNode {
      get { return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode) FindChildByRole(TYPE_EXPRESSION); }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode ValueName {
      get { return (JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode) FindChildByRole(NAME); }
    }
    public virtual  JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinition ContainingLetDefinition {
      get
      {
        CompositeElement current = this;  
        if (current.parent is JetBrains.ReSharper.Psi.FSharp.Impl.Tree.BindingStub) {
          if (current.parent.GetChildRole (current) != JetBrains.ReSharper.Psi.FSharp.Impl.Tree.BindingStub.SOURCE) return null;
          current = current.parent;
        } else return null;
        if (current.parent is JetBrains.ReSharper.Psi.FSharp.Impl.Tree.LetDefinitionStub) {
          if (current.parent.GetChildRole (current) != JetBrains.ReSharper.Psi.FSharp.Impl.Tree.LetDefinitionStub.BINDING_SCHEME) return null;
          current = current.parent;
        } else return null;
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinition) current;
      }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression SetTypeExpression (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.OPERATOR_NAME
            ||next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType._IDENTIFIER) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression)result;
          }
        }
        while(TokenBitsets.ElementBitset_1[next.NodeType]) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression)result;
          } else {
            if (TokenBitsets.ElementBitset_1[next.NodeType]) {
              current = next;
            } else {
              return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression)result;
            }
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_COLON_OP) {
            if (param != null) {
              current = next;
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (TokenBitsets.ElementBitset_2[next.NodeType]) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpression)result;
      }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode SetTypeExpressionNode (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.OPERATOR_NAME
            ||next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType._IDENTIFIER) {
            current = next;
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)result;
          }
        }
        while(TokenBitsets.ElementBitset_1[next.NodeType]) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)result;
          } else {
            if (TokenBitsets.ElementBitset_1[next.NodeType]) {
              current = next;
            } else {
              return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)result;
            }
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.TokenType.KEYWORD_COLON_OP) {
            if (param != null) {
              current = next;
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (TokenBitsets.ElementBitset_2[next.NodeType]) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.ITypeExpressionNode)result;
      }
    }
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode SetValueName (JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.OPERATOR_NAME
            ||next.NodeType == JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType._IDENTIFIER) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IValueNameNode)result;
      }
    }
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IPattern AddParameterBefore (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern param, JetBrains.ReSharper.Psi.FSharp.Tree.IPattern anchor)
    {
      throw new NotImplementedException ("AddParameterBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode AddParametersNodeBefore (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode param, JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode anchor)
    {
      throw new NotImplementedException ("AddParametersNodeBefore");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddBefore = null;
        $rule
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IPattern AddParameterAfter (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern param, JetBrains.ReSharper.Psi.FSharp.Tree.IPattern anchor)
    {
      throw new NotImplementedException ("AddParameterAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern)result;
        } else {
          current = next;
        }
        if (anchor == null) {
          childToAddAfter = current;
          result = childToAddAfter = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, childToAddAfter, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
          return (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern)result;
        }
        next = GetNextFilteredChild (current);
        while(next != null && (TokenBitsets.ElementBitset_1[next.NodeType])) {
          next = GetNextFilteredChild (current);
          childToAddAfter = next;
          if (anchor == next) {
            result = childToAddAfter = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, childToAddAfter, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern)result;
          }
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern)result;
      }
    }
    */
    /*
    public virtual JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode AddParametersNodeAfter (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode param, JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode anchor)
    {
      throw new NotImplementedException ("AddParametersNodeAfter");
      using (Shell.WriteLockCookie.Create ())
      {
        TreeElement current = null, next, result = null;
        TreeElement childToAddAfter = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)result;
        } else {
          current = next;
        }
        if (anchor == null) {
          childToAddAfter = current;
          result = childToAddAfter = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, childToAddAfter, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
          return (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)result;
        }
        next = GetNextFilteredChild (current);
        while(next != null && (TokenBitsets.ElementBitset_1[next.NodeType])) {
          next = GetNextFilteredChild (current);
          childToAddAfter = next;
          if (anchor == next) {
            result = childToAddAfter = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, childToAddAfter, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)result;
          }
          if (next == null) {
            return (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)result;
          } else {
            current = next;
          }
          next = GetNextFilteredChild (current);
        }
        return (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode)result;
      }
    }
    */
    /*
    public virtual void RemoveParameter (JetBrains.ReSharper.Psi.FSharp.Tree.IPattern param)
    {
      throw new NotImplementedException ("RemoveParameter");
    }
    */
    /*
    public virtual void RemoveParametersNode (JetBrains.ReSharper.Psi.FSharp.Tree.IPatternNode param)
    {
      throw new NotImplementedException ("RemoveParametersNode");
    }
    */
    JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValueNode JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValue.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.IBindingValueSchemeNode JetBrains.ReSharper.Psi.FSharp.IBindingValueScheme.ToTreeNode() { return this; }
    JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSourceNode JetBrains.ReSharper.Psi.FSharp.Tree.IBindingSource.ToTreeNode() { return this; }
    public override string ToString() {
      return "IBindingValue";
    }
  }
}
