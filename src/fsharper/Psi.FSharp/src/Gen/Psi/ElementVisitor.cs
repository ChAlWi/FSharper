//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
namespace JetBrains.ReSharper.Psi.FSharp {
  public abstract partial class ElementVisitor  {
    public virtual void VisitElement ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.Tree.IElement param) {
    }
    public virtual void VisitFSharpFile ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpFile FSharpFileParam) {
      VisitElement (FSharpFileParam);
    }
    public virtual void VisitAlgebraicTypeRepresentation ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IAlgebraicTypeRepresentation algebraicTypeRepresentationParam) {
      VisitElement (algebraicTypeRepresentationParam);
    }
    public virtual void VisitAndExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IAndExpression andExpressionParam) {
      VisitElement (andExpressionParam);
    }
    public virtual void VisitApplicationExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IApplicationExpression applicationExpressionParam) {
      VisitElement (applicationExpressionParam);
    }
    public virtual void VisitArrayExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IArrayExpression arrayExpressionParam) {
      VisitElement (arrayExpressionParam);
    }
    public virtual void VisitArrayPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IArrayPattern arrayPatternParam) {
      VisitElement (arrayPatternParam);
    }
    public virtual void VisitArrayType ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IArrayType arrayTypeParam) {
      VisitElement (arrayTypeParam);
    }
    public virtual void VisitAsValuePattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IAsValuePattern asValuePatternParam) {
      VisitElement (asValuePatternParam);
    }
    public virtual void VisitAssertExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IAssertExpression assertExpressionParam) {
      VisitElement (assertExpressionParam);
    }
    public virtual void VisitAssignExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IAssignExpression assignExpressionParam) {
      VisitElement (assignExpressionParam);
    }
    public virtual void VisitAssignFieldExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IAssignFieldExpression assignFieldExpressionParam) {
      VisitElement (assignFieldExpressionParam);
    }
    public virtual void VisitAttribute ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IAttribute attributeParam) {
      VisitElement (attributeParam);
    }
    public virtual void VisitAttributeReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IAttributeReference attributeReferenceParam) {
      VisitElement (attributeReferenceParam);
    }
    public virtual void VisitBinaryAddExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IBinaryAddExpression binaryAddExpressionParam) {
      VisitElement (binaryAddExpressionParam);
    }
    public virtual void VisitBinaryMultExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IBinaryMultExpression binaryMultExpressionParam) {
      VisitElement (binaryMultExpressionParam);
    }
    public virtual void VisitBinaryPowerExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IBinaryPowerExpression binaryPowerExpressionParam) {
      VisitElement (binaryPowerExpressionParam);
    }
    public virtual void VisitBinding ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IBinding bindingParam) {
      VisitElement (bindingParam);
    }
    public virtual void VisitBindingPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IBindingPattern bindingPatternParam) {
      VisitElement (bindingPatternParam);
    }
    public virtual void VisitBindingValue ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IBindingValue bindingValueParam) {
      VisitElement (bindingValueParam);
    }
    public virtual void VisitBracketedExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IBracketedExpression bracketedExpressionParam) {
      VisitElement (bracketedExpressionParam);
    }
    public virtual void VisitBracketedFieldValueExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IBracketedFieldValueExpression bracketedFieldValueExpressionParam) {
      VisitElement (bracketedFieldValueExpressionParam);
    }
    public virtual void VisitBracketedPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IBracketedPattern bracketedPatternParam) {
      VisitElement (bracketedPatternParam);
    }
    public virtual void VisitComparisonExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IComparisonExpression comparisonExpressionParam) {
      VisitElement (comparisonExpressionParam);
    }
    public virtual void VisitConstantExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IConstantExpression constantExpressionParam) {
      VisitElement (constantExpressionParam);
    }
    public virtual void VisitConstantPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IConstantPattern constantPatternParam) {
      VisitElement (constantPatternParam);
    }
    public virtual void VisitConstructorDeclaration ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorDeclaration constructorDeclarationParam) {
      VisitElement (constructorDeclarationParam);
    }
    public virtual void VisitConstructorReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IConstructorReference constructorReferenceParam) {
      VisitElement (constructorReferenceParam);
    }
    public virtual void VisitCreationExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.ICreationExpression creationExpressionParam) {
      VisitElement (creationExpressionParam);
    }
    public virtual void VisitCreationWithOverridingMethodsExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.ICreationWithOverridingMethodsExpression creationWithOverridingMethodsExpressionParam) {
      VisitElement (creationWithOverridingMethodsExpressionParam);
    }
    public virtual void VisitDisjunctionPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IDisjunctionPattern disjunctionPatternParam) {
      VisitElement (disjunctionPatternParam);
    }
    public virtual void VisitDoExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IDoExpression doExpressionParam) {
      VisitElement (doExpressionParam);
    }
    public virtual void VisitDoExpressionDefinition ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IDoExpressionDefinition doExpressionDefinitionParam) {
      VisitElement (doExpressionDefinitionParam);
    }
    public virtual void VisitDowncastExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IDowncastExpression downcastExpressionParam) {
      VisitElement (downcastExpressionParam);
    }
    public virtual void VisitDowncastExpressionToType ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IDowncastExpressionToType downcastExpressionToTypeParam) {
      VisitElement (downcastExpressionToTypeParam);
    }
    public virtual void VisitExceptionAlias ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionAlias exceptionAliasParam) {
      VisitElement (exceptionAliasParam);
    }
    public virtual void VisitExceptionDeclaration ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionDeclaration exceptionDeclarationParam) {
      VisitElement (exceptionDeclarationParam);
    }
    public virtual void VisitExceptionReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IExceptionReference exceptionReferenceParam) {
      VisitElement (exceptionReferenceParam);
    }
    public virtual void VisitExpressionBlock ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IExpressionBlock expressionBlockParam) {
      VisitElement (expressionBlockParam);
    }
    public virtual void VisitExpressionSequence ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IExpressionSequence expressionSequenceParam) {
      VisitElement (expressionSequenceParam);
    }
    public virtual void VisitFieldAssignment ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IFieldAssignment fieldAssignmentParam) {
      VisitElement (fieldAssignmentParam);
    }
    public virtual void VisitFieldAssignmentList ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IFieldAssignmentList fieldAssignmentListParam) {
      VisitElement (fieldAssignmentListParam);
    }
    public virtual void VisitFieldDeclaration ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IFieldDeclaration fieldDeclarationParam) {
      VisitElement (fieldDeclarationParam);
    }
    public virtual void VisitFieldDeclarationList ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IFieldDeclarationList fieldDeclarationListParam) {
      VisitElement (fieldDeclarationListParam);
    }
    public virtual void VisitFieldPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IFieldPattern fieldPatternParam) {
      VisitElement (fieldPatternParam);
    }
    public virtual void VisitFieldPatternList ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IFieldPatternList fieldPatternListParam) {
      VisitElement (fieldPatternListParam);
    }
    public virtual void VisitFieldReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IFieldReference fieldReferenceParam) {
      VisitElement (fieldReferenceParam);
    }
    public virtual void VisitForAllTypeExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IForAllTypeExpression forAllTypeExpressionParam) {
      VisitElement (forAllTypeExpressionParam);
    }
    public virtual void VisitForStatementExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IForStatementExpression forStatementExpressionParam) {
      VisitElement (forStatementExpressionParam);
    }
    public virtual void VisitFunExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IFunExpression funExpressionParam) {
      VisitElement (funExpressionParam);
    }
    public virtual void VisitFunctionExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IFunctionExpression functionExpressionParam) {
      VisitElement (functionExpressionParam);
    }
    public virtual void VisitFunctionType ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IFunctionType functionTypeParam) {
      VisitElement (functionTypeParam);
    }
    public virtual void VisitIdReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IIdReference idReferenceParam) {
      VisitElement (idReferenceParam);
    }
    public virtual void VisitIfStatementExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IIfStatementExpression ifStatementExpressionParam) {
      VisitElement (ifStatementExpressionParam);
    }
    public virtual void VisitImplementationUnit ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IImplementationUnit implementationUnitParam) {
      VisitElement (implementationUnitParam);
    }
    public virtual void VisitInfixOperatorExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IInfixOperatorExpression infixOperatorExpressionParam) {
      VisitElement (infixOperatorExpressionParam);
    }
    public virtual void VisitLazyExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.ILazyExpression lazyExpressionParam) {
      VisitElement (lazyExpressionParam);
    }
    public virtual void VisitLazyType ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.ILazyType lazyTypeParam) {
      VisitElement (lazyTypeParam);
    }
    public virtual void VisitLetDefinition ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.ILetDefinition letDefinitionParam) {
      VisitElement (letDefinitionParam);
    }
    public virtual void VisitListConcatenateExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IListConcatenateExpression listConcatenateExpressionParam) {
      VisitElement (listConcatenateExpressionParam);
    }
    public virtual void VisitListConstructorExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IListConstructorExpression listConstructorExpressionParam) {
      VisitElement (listConstructorExpressionParam);
    }
    public virtual void VisitListConstructorPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IListConstructorPattern listConstructorPatternParam) {
      VisitElement (listConstructorPatternParam);
    }
    public virtual void VisitLocalDeclarationsInExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.ILocalDeclarationsInExpression localDeclarationsInExpressionParam) {
      VisitElement (localDeclarationsInExpressionParam);
    }
    public virtual void VisitMatchClause ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IMatchClause matchClauseParam) {
      VisitElement (matchClauseParam);
    }
    public virtual void VisitMatchExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IMatchExpression matchExpressionParam) {
      VisitElement (matchExpressionParam);
    }
    public virtual void VisitMemberAccessExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IMemberAccessExpression memberAccessExpressionParam) {
      VisitElement (memberAccessExpressionParam);
    }
    public virtual void VisitModuleReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReference moduleReferenceParam) {
      VisitElement (moduleReferenceParam);
    }
    public virtual void VisitModuleReferenceList ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceList moduleReferenceListParam) {
      VisitElement (moduleReferenceListParam);
    }
    public virtual void VisitModuleReferenceOld ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IModuleReferenceOld moduleReferenceOldParam) {
      VisitElement (moduleReferenceOldParam);
    }
    public virtual void VisitMultiParameterTypeReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IMultiParameterTypeReference multiParameterTypeReferenceParam) {
      VisitElement (multiParameterTypeReferenceParam);
    }
    public virtual void VisitMultipleMatching ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IMultipleMatching multipleMatchingParam) {
      VisitElement (multipleMatchingParam);
    }
    public virtual void VisitMutableBindingValue ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IMutableBindingValue mutableBindingValueParam) {
      VisitElement (mutableBindingValueParam);
    }
    public virtual void VisitOneParameterTypeReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IOneParameterTypeReference oneParameterTypeReferenceParam) {
      VisitElement (oneParameterTypeReferenceParam);
    }
    public virtual void VisitOpenModuleDefinition ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IOpenModuleDefinition openModuleDefinitionParam) {
      VisitElement (openModuleDefinitionParam);
    }
    public virtual void VisitOrExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IOrExpression orExpressionParam) {
      VisitElement (orExpressionParam);
    }
    public virtual void VisitParameterizedConstructorPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IParameterizedConstructorPattern parameterizedConstructorPatternParam) {
      VisitElement (parameterizedConstructorPatternParam);
    }
    public virtual void VisitParenthesizedExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IParenthesizedExpression parenthesizedExpressionParam) {
      VisitElement (parenthesizedExpressionParam);
    }
    public virtual void VisitParenthesizedFieldValueExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IParenthesizedFieldValueExpression parenthesizedFieldValueExpressionParam) {
      VisitElement (parenthesizedFieldValueExpressionParam);
    }
    public virtual void VisitParenthesizedPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IParenthesizedPattern parenthesizedPatternParam) {
      VisitElement (parenthesizedPatternParam);
    }
    public virtual void VisitParenthesizedType ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IParenthesizedType parenthesizedTypeParam) {
      VisitElement (parenthesizedTypeParam);
    }
    public virtual void VisitPatternMatching ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IPatternMatching patternMatchingParam) {
      VisitElement (patternMatchingParam);
    }
    public virtual void VisitPrefixOperatorExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IPrefixOperatorExpression prefixOperatorExpressionParam) {
      VisitElement (prefixOperatorExpressionParam);
    }
    public virtual void VisitQualifiedIdReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IQualifiedIdReference qualifiedIdReferenceParam) {
      VisitElement (qualifiedIdReferenceParam);
    }
    public virtual void VisitQualifiedIdentifierName ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedIdentifierName qualifiedIdentifierNameParam) {
      VisitElement (qualifiedIdentifierNameParam);
    }
    public virtual void VisitQualifiedValueName ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueName qualifiedValueNameParam) {
      VisitElement (qualifiedValueNameParam);
    }
    public virtual void VisitQualifiedValueReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IQualifiedValueReference qualifiedValueReferenceParam) {
      VisitElement (qualifiedValueReferenceParam);
    }
    public virtual void VisitRangePattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IRangePattern rangePatternParam) {
      VisitElement (rangePatternParam);
    }
    public virtual void VisitRecordExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IRecordExpression recordExpressionParam) {
      VisitElement (recordExpressionParam);
    }
    public virtual void VisitRecordPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IRecordPattern recordPatternParam) {
      VisitElement (recordPatternParam);
    }
    public virtual void VisitRecordTypeRepresentation ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IRecordTypeRepresentation recordTypeRepresentationParam) {
      VisitElement (recordTypeRepresentationParam);
    }
    public virtual void VisitStringConcatenateExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IStringConcatenateExpression stringConcatenateExpressionParam) {
      VisitElement (stringConcatenateExpressionParam);
    }
    public virtual void VisitTryFinallyExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.ITryFinallyExpression tryFinallyExpressionParam) {
      VisitElement (tryFinallyExpressionParam);
    }
    public virtual void VisitTryWithExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.ITryWithExpression tryWithExpressionParam) {
      VisitElement (tryWithExpressionParam);
    }
    public virtual void VisitTupleExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.ITupleExpression tupleExpressionParam) {
      VisitElement (tupleExpressionParam);
    }
    public virtual void VisitTuplePattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.ITuplePattern tuplePatternParam) {
      VisitElement (tuplePatternParam);
    }
    public virtual void VisitTupleType ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.ITupleType tupleTypeParam) {
      VisitElement (tupleTypeParam);
    }
    public virtual void VisitTypeDeclaration ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDeclaration typeDeclarationParam) {
      VisitElement (typeDeclarationParam);
    }
    public virtual void VisitTypeDefinition ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.ITypeDefinition typeDefinitionParam) {
      VisitElement (typeDefinitionParam);
    }
    public virtual void VisitTypeParameterDeclaration ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterDeclaration typeParameterDeclarationParam) {
      VisitElement (typeParameterDeclarationParam);
    }
    public virtual void VisitTypeParameterList ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.ITypeParameterList typeParameterListParam) {
      VisitElement (typeParameterListParam);
    }
    public virtual void VisitTypeParameterReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.ITypeParameterReference typeParameterReferenceParam) {
      VisitElement (typeParameterReferenceParam);
    }
    public virtual void VisitTypeRefOrConstructorDecl ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.ITypeRefOrConstructorDecl typeRefOrConstructorDeclParam) {
      VisitElement (typeRefOrConstructorDeclParam);
    }
    public virtual void VisitTypeReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.ITypeReference typeReferenceParam) {
      VisitElement (typeReferenceParam);
    }
    public virtual void VisitTypeTestExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.ITypeTestExpression typeTestExpressionParam) {
      VisitElement (typeTestExpressionParam);
    }
    public virtual void VisitTypeTestPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.ITypeTestPattern typeTestPatternParam) {
      VisitElement (typeTestPatternParam);
    }
    public virtual void VisitTypedExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.ITypedExpression typedExpressionParam) {
      VisitElement (typedExpressionParam);
    }
    public virtual void VisitTypedPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.ITypedPattern typedPatternParam) {
      VisitElement (typedPatternParam);
    }
    public virtual void VisitUnaryMinusExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IUnaryMinusExpression unaryMinusExpressionParam) {
      VisitElement (unaryMinusExpressionParam);
    }
    public virtual void VisitUnderlinePattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IUnderlinePattern underlinePatternParam) {
      VisitElement (underlinePatternParam);
    }
    public virtual void VisitUnderlineType ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IUnderlineType underlineTypeParam) {
      VisitElement (underlineTypeParam);
    }
    public virtual void VisitUpcastExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IUpcastExpression upcastExpressionParam) {
      VisitElement (upcastExpressionParam);
    }
    public virtual void VisitUpcastExpressionToType ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IUpcastExpressionToType upcastExpressionToTypeParam) {
      VisitElement (upcastExpressionToTypeParam);
    }
    public virtual void VisitValueDeclarationPattern ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IValueDeclarationPattern valueDeclarationPatternParam) {
      VisitElement (valueDeclarationPatternParam);
    }
    public virtual void VisitValueReferenceExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IValueReferenceExpression valueReferenceExpressionParam) {
      VisitElement (valueReferenceExpressionParam);
    }
    public virtual void VisitValueSpecification ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IValueSpecification valueSpecificationParam) {
      VisitElement (valueSpecificationParam);
    }
    public virtual void VisitWhileStatementExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IWhileStatementExpression whileStatementExpressionParam) {
      VisitElement (whileStatementExpressionParam);
    }
    public virtual void VisitWithRecordExpression ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.IWithRecordExpression withRecordExpressionParam) {
      VisitElement (withRecordExpressionParam);
    }
    public virtual void VisitWithoutParameterTypeReference ([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.FSharp.Tree.IWithoutParameterTypeReference withoutParameterTypeReferenceParam) {
      VisitElement (withoutParameterTypeReferenceParam);
    }
  }
}
