//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI;
using JetBrains.ReSharper.Psi.FSharp.Impl;
namespace JetBrains.ReSharper.Psi.FSharp.Parsing {
  internal abstract class FSharpParserGenerated : JetBrains.ReSharper.Psi.Parsing.GeneratedParserBase<JetBrains.ReSharper.Psi.Parsing.ILexer> 
  {
    public FSharpParserGenerated() {}
    protected ParsingContext myCurrentContext = ParsingContext.UNDEFINED;
    protected enum ParsingContext : short {
      UNDEFINED
    }
    protected class ParsingContextAttribute : System.Attribute {
      private ParsingContext myParsingContext;
      public ParsingContextAttribute (ParsingContext context) {
        myParsingContext = context;
      }
      public ParsingContext ParsingContext {
        get {
          return myParsingContext;
        }
      }
    }
    protected bool IsInFollow (JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) {
      switch (myCurrentContext) {
        case ParsingContext.UNDEFINED: return false;
        default:
        throw new System.InvalidOperationException("Unknown context");
        return false;
      }
    }
    protected virtual TreeElement match(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) {
      if (myLexer.TokenType != tokenType) {
        var tokenRepr = tokenType.TokenRepresentation;
        if (string.IsNullOrEmpty(tokenRepr))
        throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (JetBrains.ReSharper.Psi.FSharp.Parsing.ParserMessages.GetExpectedMessage(tokenType.ToString()));
        throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (JetBrains.ReSharper.Psi.FSharp.Parsing.ParserMessages.GetExpectedMessage(tokenRepr));
      }
      return createToken();
    }
    protected void skip(CompositeElement parent) {
      parent.AppendNewChild (createToken());
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseFSharpFile () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType._F_SHARP_FILE);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MODULE) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MODULE);
          result.AppendNewChild (tempParsingResult);
          parseQualifiedIdentifierNameFull(result);
        }
        tempParsingResult = parseImplementationUnit();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage0());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInFSharpFile (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInFSharpFile (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseAlgebraicTypeRepresentation () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ALGEBRAIC_TYPE_REPRESENTATION);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseConstructorDeclaration();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseConstructorDeclaration();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseAndExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.AND_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ANDAND_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ANDAND_OP);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage1());
        }
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseApplicationExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.APPLICATION_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseArrayExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ARRAY_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKETOR_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ORRBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseArrayPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lbracketOr = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ARRAY_PATTERN);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKETOR_OP);
        lbracketOr = tempParsingResult;
        parseArrayPatternAux(result, lbracketOr);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lbracketOr != null && lbracketOr.Parent == null) {
          if (lbracketOr != null) result.AppendNewChild (lbracketOr);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseArrayPatternAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lbracketOr) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lbracketOr;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parsePattern();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parsePattern();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ORRBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lbracketOr != null && lbracketOr.Parent == null) {
          if (lbracketOr != null) result.AppendNewChild (lbracketOr);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseArrayType () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ARRAY_TYPE);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while(tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseAsValuePattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.AS_VALUE_PATTERN);
        tempParsingResult = parsePattern();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AS);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseValueName();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseAssertExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ASSERT_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASSERT);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseAssignExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ASSIGN_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONEQ_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseAssignFieldExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ASSIGN_FIELD_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LARROW_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseAttribute () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ATTRIBUTE);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKETLT_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseAttributeReference();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseTupleExpression();
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_GTRBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_0 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage2());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInAttribute (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInAttribute (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_0 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseAttributeReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ATTRIBUTE_REFERENCE);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseModuleReference();
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBinaryAddExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.BINARY_ADD_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_PLUS_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_PLUS_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUS_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUS_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_PLUS) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_PLUS);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_MINUS) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_MINUS);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage3());
        }
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBinaryExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseBinaryAddExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseBinaryMultExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseBinaryPowerExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseComparisonExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseAndExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseOrExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseListConcatenateExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseStringConcatenateExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseAssignExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseAssignFieldExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseListConstructorExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseInfixOperatorExpression();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage4());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        }
        throw;
      }
      return tempParsingResult;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBinaryMultExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.BINARY_MULT_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MOD) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MOD);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_ASTERISK) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_ASTERISK);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DIV) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DIV);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_PERC) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_PERC);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage5());
        }
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBinaryPowerExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.BINARY_POWER_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_ASTERISKASTERISK);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBinding () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.BINDING);
        tokenType = myLexer.TokenType;
        while(tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKETLT_OP) {
          tempParsingResult = parseAttribute();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = parseBindingSource();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_2 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage6());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInBinding (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInBinding (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_2 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBindingPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.BINDING_PATTERN);
        tempParsingResult = parsePattern();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBindingScheme () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DO) {
          tempParsingResult = parseDoExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_0 [tokenType]) {
          tempParsingResult = parseBinding();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage7());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_3 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage8());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInBindingScheme ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement handleErrorInBindingScheme (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_3 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBindingSource ();
    protected virtual CompositeElement handleErrorInBindingSource (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP)  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBindingValue (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement value);
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBindingValueScheme () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      TreeElement value = null;
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseValueName();
          value = tempParsingResult;
          tempParsingResult = parseBindingValue(value);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MUTABLE) {
          tempParsingResult = parseMutableBindingValue();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage9());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP)  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage10());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInBindingValueScheme ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement handleErrorInBindingValueScheme (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP)  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual void parseBrackedPatternAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lbracket) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lbracket;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parsePattern();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parsePattern();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lbracket != null && lbracket.Parent == null) {
          if (lbracket != null) result.AppendNewChild (lbracket);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBracketedExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.BRACKETED_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBracketedFieldValueExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.BRACKETED_FIELD_VALUE_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseBracketedPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lbracket = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.BRACKETED_PATTERN);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKET_OP);
        lbracket = tempParsingResult;
        parseBrackedPatternAux(result, lbracket);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lbracket != null && lbracket.Parent == null) {
          if (lbracket != null) result.AppendNewChild (lbracket);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseComparisonExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.COMPARISON_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LT_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LT_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_GT_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_GT_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_NOTEQ_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_NOTEQ_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_EQ) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_EQ);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_LT) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_LT);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_GT) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_GT);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage11());
        }
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseConstantExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.CONSTANT_EXPRESSION);
        parseConstantValue(result);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage12());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInConstantExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInConstantExpression (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseConstantPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.CONSTANT_PATTERN);
        parseConstantValue(result);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseConstantValue (CompositeElement result) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_5 [tokenType]) {
          parseIntConstant(result);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.FLOAT32_LITERAL
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.FLOAT64_LITERAL) {
          parseFloatConstant(result);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.CHARACTER_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.CHARACTER_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.STRING_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.STRING_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_FALSE) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_FALSE);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_TRUE) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_TRUE);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_NULL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_NULL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKET_OP) {
          tempParsingResult = parseEmptyList();
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseUnit();
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKETOR_OP) {
          tempParsingResult = parseEmptyArray();
          result.AppendNewChild (tempParsingResult);
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage13());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseConstructorDeclaration () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.CONSTRUCTOR_DECLARATION);
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OF) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OF);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseTypeExpression();
          result.AppendNewChild (tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_6 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage14());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInConstructorDeclaration (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInConstructorDeclaration (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_6 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseConstructorReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.CONSTRUCTOR_REFERENCE);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseModuleReference();
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseCreationExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.CREATION_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_NEW);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseTupleExpression();
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
          result.AppendNewChild (tempParsingResult);
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseCreationWithOverridingMethodsExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lbrace = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.CREATION_WITH_OVERRIDING_METHODS_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACE_OP);
        lbrace = tempParsingResult;
        parseCreationWithOverridingMethodsExpressionAux(result, lbrace);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lbrace != null && lbrace.Parent == null) {
          if (lbrace != null) result.AppendNewChild (lbrace);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseCreationWithOverridingMethodsExpressionAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lbrace) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lbrace;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseCreationExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_WITH);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseBindingScheme();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseBindingScheme();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACE_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lbrace != null && lbrace.Parent == null) {
          if (lbrace != null) result.AppendNewChild (lbrace);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseDefinition () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      TreeElement exception = null;
      TreeElement ident = null;
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LET) {
          tempParsingResult = parseLetDefinition();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EXCEPTION) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EXCEPTION);
          exception = tempParsingResult;
          tempParsingResult = parseIdentifier();
          ident = tempParsingResult;
          tempParsingResult = parseExceptionDefinition(exception, ident);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_TYPE) {
          tempParsingResult = parseTypeDefinition();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DO) {
          tempParsingResult = parseDoExpressionDefinition();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OPEN) {
          tempParsingResult = parseOpenModuleDefinition();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_VAL) {
          tempParsingResult = parseValueSpecification();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage15());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_7 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage16());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInDefinition ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement handleErrorInDefinition (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_7 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseDisjunctionPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.DISJUNCTION_PATTERN);
        tempParsingResult = parsePattern();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parsePattern();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseDoExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.DO_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DO);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseDoExpressionDefinition () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.DO_EXPRESSION_DEFINITION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DO);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseDowncastExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.DOWNCAST_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOWNCAST);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseDowncastExpressionToType () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lparenth = null;
      TreeElement expression = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.DOWNCAST_EXPRESSION_TO_TYPE);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
        lparenth = tempParsingResult;
        tempParsingResult = parseExpression();
        expression = tempParsingResult;
        parseDowncastExpressionToTypeAux(result, lparenth, expression);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseDowncastExpressionToTypeAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lparenth, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement expression) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lparenth;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = expression;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONQUESTGT_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseEmptyArray () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.EMPTY_ARRAY);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKETOR_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ORRBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseEmptyList () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.EMPTY_LIST);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACKET_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExceptionAlias (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement exception, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ident, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement of, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement type) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.EXCEPTION_ALIAS);
        tempParsingResult = exception;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = ident;
        result.AppendNewChild (tempParsingResult);
        if (of != null) {
          tempParsingResult = of;
          result.AppendNewChild (tempParsingResult);
        }
        if (type != null) {
          tempParsingResult = type;
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExceptionReference();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (exception != null && exception.Parent == null) {
          if (exception != null) result.AppendNewChild (exception);
          if (ident != null) result.AppendNewChild (ident);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExceptionDeclaration (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement exception, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ident, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement of, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement type) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.EXCEPTION_DECLARATION);
        tempParsingResult = exception;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = ident;
        result.AppendNewChild (tempParsingResult);
        if (of != null) {
          tempParsingResult = of;
          result.AppendNewChild (tempParsingResult);
        }
        if (type != null) {
          tempParsingResult = type;
          result.AppendNewChild (tempParsingResult);
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (exception != null && exception.Parent == null) {
          if (exception != null) result.AppendNewChild (exception);
          if (ident != null) result.AppendNewChild (ident);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExceptionDefinition (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement exception, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ident) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      TreeElement of = null;
      TreeElement type = null;
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OF) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OF);
          of = tempParsingResult;
          tempParsingResult = parseTypeExpression();
          type = tempParsingResult;
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP) {
          tempParsingResult = parseExceptionAlias(exception, ident, of, type);
        } else {
          tempParsingResult = parseExceptionDeclaration(exception, ident, of, type);
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        }
        throw;
      }
      return tempParsingResult;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExceptionReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.EXCEPTION_REFERENCE);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseModuleReference();
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_7 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage17());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExceptionReference (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInExceptionReference (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_7 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = parseExpressionSeq();
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage18());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInExpression ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionSeq () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionAssign();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.EXPRESSION_SEQUENCE);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseExpressionSeq();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage19());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionAssign () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionTuple();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONEQ_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ASSIGN_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONEQ_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseExpressionAssign();
            result.AppendNewChild (tempParsingResult);
          } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LARROW_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ASSIGN_FIELD_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LARROW_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseExpressionTuple();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage20());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionTuple () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionOr();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TUPLE_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tokenType = myLexer.TokenType;
            if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP) {
              do {
                tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
                result.AppendNewChild (tempParsingResult);
                tempParsingResult = parseExpressionOr();
                result.AppendNewChild (tempParsingResult);
                tokenType = myLexer.TokenType;
              }
              while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
            } else {
              if (result.firstChild == null) result = null;
              throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage21());
            }
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage22());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionOr () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionAnd();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR
            ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OROR_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.OR_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tokenType = myLexer.TokenType;
            if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OROR_OP) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OROR_OP);
              result.AppendNewChild (tempParsingResult);
            } else {
              if (result.firstChild == null) result = null;
              throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage23());
            }
            tempParsingResult = parseExpressionAnd();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage24());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionAnd () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionCompare();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ANDAND_OP
            ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.AND_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tokenType = myLexer.TokenType;
            if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND_OP) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND_OP);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ANDAND_OP) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ANDAND_OP);
              result.AppendNewChild (tempParsingResult);
            } else {
              if (result.firstChild == null) result = null;
              throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage25());
            }
            tempParsingResult = parseExpressionCompare();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage26());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionCompare () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionConcat();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType != null && TokenBitsets.TokenBitset_8 [tokenType]) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.COMPARISON_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tokenType = myLexer.TokenType;
            if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LT_OP) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LT_OP);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_GT_OP) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_GT_OP);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_NOTEQ_OP) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_NOTEQ_OP);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_EQ) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_EQ);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_LT) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_LT);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_GT) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_GT);
              result.AppendNewChild (tempParsingResult);
            } else {
              if (result.firstChild == null) result = null;
              throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage27());
            }
            tempParsingResult = parseExpressionConcat();
            result.AppendNewChild (tempParsingResult);
          } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_AND
            ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_OR
            ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DOLLAR) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.INFIX_OPERATOR_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tokenType = myLexer.TokenType;
            if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_OR) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_OR);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_AND) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_AND);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DOLLAR) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DOLLAR);
              result.AppendNewChild (tempParsingResult);
            } else {
              if (result.firstChild == null) result = null;
              throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage28());
            }
            tempParsingResult = parseExpressionConcat();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage29());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionConcat () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionList();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_AT) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.LIST_CONCATENATE_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_AT);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseExpressionConcat();
            result.AppendNewChild (tempParsingResult);
          } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_XOR) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.STRING_CONCATENATE_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_XOR);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseExpressionList();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage30());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionList () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionAdd();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONCOLON_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.LIST_CONSTRUCTOR_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONCOLON_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseExpressionList();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage31());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionAdd () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionMult();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType != null && TokenBitsets.TokenBitset_9 [tokenType]) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.BINARY_ADD_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tokenType = myLexer.TokenType;
            if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_PLUS_OP) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_PLUS_OP);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUS_OP) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUS_OP);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_PLUS) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_PLUS);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_MINUS) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_MINUS);
              result.AppendNewChild (tempParsingResult);
            } else {
              if (result.firstChild == null) result = null;
              throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage32());
            }
            tempParsingResult = parseExpressionMult();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage33());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionMult () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionPower();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType != null && TokenBitsets.TokenBitset_10 [tokenType]) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.BINARY_MULT_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tokenType = myLexer.TokenType;
            if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MOD) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MOD);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_ASTERISK) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_ASTERISK);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DIV) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DIV);
              result.AppendNewChild (tempParsingResult);
            } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_PERC) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_PERC);
              result.AppendNewChild (tempParsingResult);
            } else {
              if (result.firstChild == null) result = null;
              throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage34());
            }
            tempParsingResult = parseExpressionPower();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage35());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionPower () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionUnaryMinus();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_ASTERISKASTERISK) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.BINARY_POWER_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_ASTERISKASTERISK);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseExpressionUnaryMinus();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage36());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionUnaryMinus () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUSDOT_OP
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUS_OP) {
          tempParsingResult = parseUnaryMinusExpression();
          result = (CompositeElement) tempParsingResult;
        }else {
          TreeElement recursive = parseExpressionAppl();
          if ( ! (recursive is CompositeElement) ) return recursive;
          result = (CompositeElement) recursive;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage37());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionAppl () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionFieldValue();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.APPLICATION_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = parseExpressionFieldValue();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage38());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionFieldValue () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseExpressionUnary();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.PARENTHESIZED_FIELD_VALUE_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseExpressionUnary();
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
            result.AppendNewChild (tempParsingResult);
          } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.BRACKETED_FIELD_VALUE_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKET_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseExpressionUnary();
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACKET_OP);
            result.AppendNewChild (tempParsingResult);
          } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.MEMBER_ACCESS_EXPRESSION);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseValueReferenceExpression();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage39());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionUnary () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_EXCL
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_QUEST
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_TILDE) {
          tempParsingResult = parsePrefixOperatorExpression();
          result = (CompositeElement) tempParsingResult;
        }else {
          TreeElement recursive = parseExpressionSimple();
          if ( ! (recursive is CompositeElement) ) return recursive;
          result = (CompositeElement) recursive;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage40());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionSimple () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseValueReferenceExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LET) {
          tempParsingResult = parseLocalDeclarationsInExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseTypedExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_11 [tokenType]) {
          tempParsingResult = parseConstantExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseParenthesizedExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKET_OP) {
          tempParsingResult = parseBracketedExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKETOR_OP) {
          tempParsingResult = parseArrayExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACE_OP) {
          tempParsingResult = parseRecordExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACE_OP) {
          tempParsingResult = parseWithRecordExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACE_OP) {
          tempParsingResult = parseCreationWithOverridingMethodsExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_BEGIN) {
          tempParsingResult = parseExpressionBlock();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_IF) {
          tempParsingResult = parseIfStatementExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_WHILE) {
          tempParsingResult = parseWhileStatementExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_FOR) {
          tempParsingResult = parseForStatementExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_FUN) {
          tempParsingResult = parseFunExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_FUNCTION) {
          tempParsingResult = parseFunctionExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_TRY) {
          tempParsingResult = parseTryWithExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_TRY) {
          tempParsingResult = parseTryFinallyExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MATCH) {
          tempParsingResult = parseMatchExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_NEW) {
          tempParsingResult = parseCreationExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASSERT) {
          tempParsingResult = parseAssertExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LAZY) {
          tempParsingResult = parseLazyExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_UPCAST) {
          tempParsingResult = parseUpcastExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOWNCAST) {
          tempParsingResult = parseDowncastExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseUpcastExpressionToType();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseDowncastExpressionToType();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseTypeTestExpression();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage41());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage42());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInExpression ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement handleErrorInExpression (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionBlock () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.EXPRESSION_BLOCK);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_BEGIN);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_END);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExpressionSequence () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.EXPRESSION_SEQUENCE);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseFieldAssignment () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FIELD_ASSIGNMENT);
        tempParsingResult = parseFieldReference();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseFieldAssignmentList () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FIELD_ASSIGNMENT_LIST);
        tempParsingResult = parseFieldAssignment();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseFieldAssignment();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseFieldDeclaration () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FIELD_DECLARATION);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MUTABLE) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MUTABLE);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLON_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeSchemeExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACE_OP
            ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP)  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage43());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInFieldDeclaration (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInFieldDeclaration (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACE_OP
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP)  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseFieldDeclarationList () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FIELD_DECLARATION_LIST);
        tempParsingResult = parseFieldDeclaration();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseFieldDeclaration();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseFieldPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FIELD_PATTERN);
        tempParsingResult = parseFieldReference();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parsePattern();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACE_OP
            ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP)  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage44());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInFieldPattern (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInFieldPattern (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACE_OP
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP)  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseFieldPatternList () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FIELD_PATTERN_LIST);
        tempParsingResult = parseFieldPattern();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseFieldPattern();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseFieldReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FIELD_REFERENCE);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseModuleReference();
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseFloatConstant (CompositeElement result) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.FLOAT32_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.FLOAT32_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.FLOAT64_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.FLOAT64_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage45());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseForAllTypeExpression (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement param) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FOR_ALL_TYPE_EXPRESSION);
        tempParsingResult = param;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (param != null && param.Parent == null) {
          if (param != null) result.AppendNewChild (param);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseForStatementExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FOR_STATEMENT_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_FOR);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_TO) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_TO);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOWNTO) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOWNTO);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage46());
        }
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DO);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DONE);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseFunExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FUN_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_FUN);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseMultipleMatching();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseFunctionExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FUNCTION_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_FUNCTION);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parsePatternMatching();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseFunctionType () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FUNCTION_TYPE);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RARROW_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseIdReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ID_REFERENCE);
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseIdentifier ();
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseIfStatementExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.IF_STATEMENT_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_IF);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_THEN);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ELSE) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ELSE);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseExpression();
          result.AppendNewChild (tempParsingResult);
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseImplementationUnit () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.IMPLEMENTATION_UNIT);
        tokenType = myLexer.TokenType;
        while(tokenType != null && TokenBitsets.TokenBitset_12 [tokenType]) {
          tempParsingResult = parseDefinition();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLONSEMICOLON_OP) {
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLONSEMICOLON_OP);
            result.AppendNewChild (tempParsingResult);
          }
          tokenType = myLexer.TokenType;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage47());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInImplementationUnit (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInImplementationUnit (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseInfixOperatorExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.INFIX_OPERATOR_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_OR) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_OR);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_AND) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_AND);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DOLLAR) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DOLLAR);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage48());
        }
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseInfixSymbol (CompositeElement result) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_EQ) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_EQ);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_LT) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_LT);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_GT) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_GT);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_AT) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_AT);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_XOR) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_XOR);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_OR) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_OR);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_AND) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_AND);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_PLUS) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_PLUS);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_MINUS) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_MINUS);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_ASTERISK) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_ASTERISK);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DIV) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DIV);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DOLLAR) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_DOLLAR);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_PERC) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_PERC);
          result.AppendNewChild (tempParsingResult);
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage49());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        throw;
      }
    }
    public virtual void parseIntConstant (CompositeElement result) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.INT_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.INT_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.INT8_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.INT8_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.UINT8_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.UINT8_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.INT16_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.INT16_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.UINT16_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.UINT16_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.INT32_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.INT32_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.UINT32_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.UINT32_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.NATIVEINT_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.NATIVEINT_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.UNATIVEINT_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.UNATIVEINT_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.INT64_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.INT64_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.UINT64_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.UINT64_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage50());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseInterfaceUnit () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.INTERFACE_UNIT);
        tokenType = myLexer.TokenType;
        while(tokenType != null && TokenBitsets.TokenBitset_13 [tokenType]) {
          tempParsingResult = parseSpecification();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLONSEMICOLON_OP) {
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLONSEMICOLON_OP);
            result.AppendNewChild (tempParsingResult);
          }
          tokenType = myLexer.TokenType;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage51());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInInterfaceUnit (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInInterfaceUnit (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseLazyExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.LAZY_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LAZY);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseLazyType () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.LAZY_TYPE);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LAZY);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseLetDefinition () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.LET_DEFINITION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LET);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_REC) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_REC);
          result.AppendNewChild (tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_INLINE) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_INLINE);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseBindingScheme();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseBindingScheme();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseListConcatenateExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.LIST_CONCATENATE_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_AT);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseListConstructorExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.LIST_CONSTRUCTOR_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONCOLON_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseListConstructorPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.LIST_CONSTRUCTOR_PATTERN);
        tempParsingResult = parsePattern();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONCOLON_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parsePattern();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseLocalDeclarationsInExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.LOCAL_DECLARATIONS_IN_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LET);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_REC) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_REC);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseBinding();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseBinding();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_IN);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseMatchClause () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.MATCH_CLAUSE);
        tempParsingResult = parsePattern();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_WHEN) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_WHEN);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseExpression();
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RARROW_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage52());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInMatchClause (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInMatchClause (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseMatchExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.MATCH_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MATCH);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_WITH);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parsePatternMatching();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseMemberAccessExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.MEMBER_ACCESS_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseValueReferenceExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseModuleReference ();
    protected virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseModuleReferenceInternal () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.MODULE_REFERENCE);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseModuleReference();
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseModuleReferenceList () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.MODULE_REFERENCE_LIST);
        tempParsingResult = parseModuleReferenceOld();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseModuleReferenceOld();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseModuleReferenceOld () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.MODULE_REFERENCE_OLD);
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseMultiParameterTypeReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lparenth = null;
      TreeElement expression = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.MULTI_PARAMETER_TYPE_REFERENCE);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
        lparenth = tempParsingResult;
        tempParsingResult = parseTypeExpression();
        expression = tempParsingResult;
        parseMultiParameterTypeReferenceAux(result, lparenth, expression);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseMultiParameterTypeReferenceAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lparenth, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement expression) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lparenth;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = expression;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseTypeExpression();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeReference();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseMultipleMatching () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.MULTIPLE_MATCHING);
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_14 [tokenType]) {
          do {
            tempParsingResult = parsePattern();
            result.AppendNewChild (tempParsingResult);
            tokenType = myLexer.TokenType;
          }
          while (tokenType != null && TokenBitsets.TokenBitset_14 [tokenType]);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage53());
        }
        parseMultipleMatchingAux(result);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseMultipleMatchingAux (CompositeElement result) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_WHEN) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_WHEN);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseExpression();
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RARROW_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseMutableBindingValue () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.MUTABLE_BINDING_VALUE);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MUTABLE);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseValueName();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseOneParameterTypeReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ONE_PARAMETER_TYPE_REFERENCE);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeReference();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseOpenModuleDefinition () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.OPEN_MODULE_DEFINITION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OPEN);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseModuleReference();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseOperatorExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_15 [tokenType]) {
          tempParsingResult = parseUnaryExpression();
        } else if (tokenType != null && TokenBitsets.TokenBitset_1 [tokenType]) {
          tempParsingResult = parseBinaryExpression();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage54());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        }
        throw;
      }
      return tempParsingResult;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseOperatorName () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lparenth = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.OPERATOR_NAME);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
        lparenth = tempParsingResult;
        parseOperatorNameAux(result, lparenth);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseOperatorNameAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lparenth) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lparenth;
        result.AppendNewChild (tempParsingResult);
        parseOverloadableOperator(result);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseOrExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.OR_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OROR_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OROR_OP);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage55());
        }
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseOverloadableOperator (CompositeElement result) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_16 [tokenType]) {
          parseInfixSymbol(result);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_EXCL
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_QUEST
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_TILDE) {
          parsePrefixSymbol(result);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_NOTEQ_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_NOTEQ_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_PLUS_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_PLUS_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUS_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUS_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUSDOT_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUSDOT_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LT_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LT_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_GT_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_GT_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ANDAND_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ANDAND_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OROR_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OROR_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONEQ_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONEQ_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MOD) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MOD);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LAND) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LAND);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LOR) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LOR);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LXOR) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LXOR);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LSL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LSL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LSR) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LSR);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASR) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASR);
          result.AppendNewChild (tempParsingResult);
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage56());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseParameterizedConstructorPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.PARAMETERIZED_CONSTRUCTOR_PATTERN);
        tempParsingResult = parseConstructorReference();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_14 [tokenType]) {
          tempParsingResult = parsePattern();
          result.AppendNewChild (tempParsingResult);
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseParameterizedTypeReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_17 [tokenType]) {
          tempParsingResult = parseOneParameterTypeReference();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseMultiParameterTypeReference();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseWithoutParameterTypeReference();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage57());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        }
        throw;
      }
      return tempParsingResult;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseParenthesizedExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lparenth = null;
      TreeElement expression = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.PARENTHESIZED_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
        lparenth = tempParsingResult;
        tempParsingResult = parseExpression();
        expression = tempParsingResult;
        parseParenthesizedExpressionAux(result, lparenth, expression);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseParenthesizedExpressionAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lparenth, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement expression) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lparenth;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = expression;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseParenthesizedFieldValueExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.PARENTHESIZED_FIELD_VALUE_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseParenthesizedPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lparenth = null;
      TreeElement pattern = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.PARENTHESIZED_PATTERN);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
        lparenth = tempParsingResult;
        tempParsingResult = parsePattern();
        pattern = tempParsingResult;
        parseParenthesizedPatternAux(result, lparenth, pattern);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (pattern != null) result.AppendNewChild (pattern);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseParenthesizedPatternAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lparenth, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement pattern) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lparenth;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = pattern;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (pattern != null) result.AppendNewChild (pattern);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseParenthesizedType () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lparenth = null;
      TreeElement expression = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.PARENTHESIZED_TYPE);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
        lparenth = tempParsingResult;
        tempParsingResult = parseTypeExpression();
        expression = tempParsingResult;
        parseParenthesizedTypeAux(result, lparenth, expression);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseParenthesizedTypeAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lparenth, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement expression) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lparenth;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = expression;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = parsePatternAs();
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_18 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage58());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInPattern ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePatternAs () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parsePatternOr();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AS) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.AS_VALUE_PATTERN);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AS);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseValueName();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_18 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage59());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInPattern (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePatternOr () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parsePatternTuple();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.DISJUNCTION_PATTERN);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parsePatternTuple();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_18 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage60());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInPattern (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePatternTuple () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parsePatternList();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TUPLE_PATTERN);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tokenType = myLexer.TokenType;
            if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP) {
              do {
                tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
                result.AppendNewChild (tempParsingResult);
                tempParsingResult = parsePatternList();
                result.AppendNewChild (tempParsingResult);
                tokenType = myLexer.TokenType;
              }
              while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
            } else {
              if (result.firstChild == null) result = null;
              throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage61());
            }
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_18 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage62());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInPattern (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePatternList () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parsePatternSimple();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONCOLON_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.LIST_CONSTRUCTOR_PATTERN);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONCOLON_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parsePatternList();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_18 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage63());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInPattern (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePatternSimple () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKET_OP) {
          tempParsingResult = parseBracketedPattern();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKETOR_OP) {
          tempParsingResult = parseArrayPattern();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACE_OP) {
          tempParsingResult = parseRecordPattern();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseParenthesizedPattern();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseTypedPattern();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_UNDERLINE_OP) {
          tempParsingResult = parseUnderlinePattern();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseParameterizedConstructorPattern();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseConstructorReference();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseValueDeclarationPattern();
        } else if (tokenType != null && TokenBitsets.TokenBitset_11 [tokenType]) {
          tempParsingResult = parseConstantPattern();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.CHARACTER_LITERAL) {
          tempParsingResult = parseRangePattern();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONQUEST_OP) {
          tempParsingResult = parseTypeTestPattern();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage64());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_18 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage65());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInPattern ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement handleErrorInPattern (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_18 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePatternMatching () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.PATTERN_MATCHING);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseMatchClause();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseMatchClause();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePrefixOperatorExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.PREFIX_OPERATOR_EXPRESSION);
        parsePrefixSymbol(result);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parsePrefixSymbol (CompositeElement result) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_EXCL) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_EXCL);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_QUEST) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_QUEST);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_TILDE) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_TILDE);
          result.AppendNewChild (tempParsingResult);
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage66());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseQualifiedIdReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.QUALIFIED_ID_REFERENCE);
        tempParsingResult = parseIdReference();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseIdReference();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseQualifiedIdentifierName (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement qualifier);
    protected virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseQualifiedIdentifierNameInternal (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement qualifier) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.QUALIFIED_IDENTIFIER_NAME);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP) {
          if (qualifier != null) {
            tempParsingResult = qualifier;
            result.AppendNewChild (tempParsingResult);
          }
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseQualifiedIdentifierNameFull (CompositeElement result) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      TreeElement id = null;
      try {
        tempParsingResult = parseIdentifier();
        id = tempParsingResult;
        tempParsingResult = parseQualifiedIdentifierName(id);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        throw;
      }
    }
    public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseQualifiedValueName ();
    protected virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseQualifiedValueNameInternal () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.QUALIFIED_VALUE_NAME);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          parseQualifiedIdentifierNameFull(result);
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseValueName();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseQualifiedValueReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.QUALIFIED_VALUE_REFERENCE);
        tempParsingResult = parseQualifiedValueName();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRangePattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.RANGE_PATTERN);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.CHARACTER_LITERAL);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOTDOT_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.CHARACTER_LITERAL);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRecordExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.RECORD_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACE_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseFieldAssignmentList();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACE_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRecordPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.RECORD_PATTERN);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACE_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseFieldPatternList();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACE_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRecordTypeRepresentation () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.RECORD_TYPE_REPRESENTATION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACE_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseFieldDeclarationList();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACE_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseSpecification () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      TreeElement exception = null;
      TreeElement ident = null;
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_VAL) {
          tempParsingResult = parseValueSpecification();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_TYPE) {
          tempParsingResult = parseTypeDefinition();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EXCEPTION) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EXCEPTION);
          exception = tempParsingResult;
          tempParsingResult = parseIdentifier();
          ident = tempParsingResult;
          tempParsingResult = parseExceptionDefinition(exception, ident);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OPEN) {
          tempParsingResult = parseOpenModuleDefinition();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage67());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_19 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage68());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInSpecification ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement handleErrorInSpecification (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_19 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseStringConcatenateExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.STRING_CONCATENATE_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_XOR);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTryFinallyExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement tryKW = null;
      TreeElement expression = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TRY_FINALLY_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_TRY);
        tryKW = tempParsingResult;
        tempParsingResult = parseExpression();
        expression = tempParsingResult;
        parseTryFinallyExpressionAux(result, tryKW, expression);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (tryKW != null && tryKW.Parent == null) {
          if (tryKW != null) result.AppendNewChild (tryKW);
          if (expression != null) result.AppendNewChild (expression);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseTryFinallyExpressionAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement tryKW, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement expression) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = tryKW;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = expression;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_FINALLY);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (tryKW != null && tryKW.Parent == null) {
          if (tryKW != null) result.AppendNewChild (tryKW);
          if (expression != null) result.AppendNewChild (expression);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTryWithExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement tryKW = null;
      TreeElement expression = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TRY_WITH_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_TRY);
        tryKW = tempParsingResult;
        tempParsingResult = parseExpression();
        expression = tempParsingResult;
        parseTryWithExpressionAux(result, tryKW, expression);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (tryKW != null && tryKW.Parent == null) {
          if (tryKW != null) result.AppendNewChild (tryKW);
          if (expression != null) result.AppendNewChild (expression);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseTryWithExpressionAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement tryKW, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement expression) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = tryKW;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = expression;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_WITH);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parsePatternMatching();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (tryKW != null && tryKW.Parent == null) {
          if (tryKW != null) result.AppendNewChild (tryKW);
          if (expression != null) result.AppendNewChild (expression);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTupleExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TUPLE_EXPRESSION);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP) {
          do {
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseExpression();
            result.AppendNewChild (tempParsingResult);
            tokenType = myLexer.TokenType;
          }
          while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage69());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage70());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInTupleExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInTupleExpression (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTuplePattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TUPLE_PATTERN);
        tempParsingResult = parsePattern();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP) {
          do {
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parsePattern();
            result.AppendNewChild (tempParsingResult);
            tokenType = myLexer.TokenType;
          }
          while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage71());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTupleType () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TUPLE_TYPE);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP) {
          do {
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseTypeExpression();
            result.AppendNewChild (tempParsingResult);
            tokenType = myLexer.TokenType;
          }
          while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage72());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeDeclaration () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TYPE_DECLARATION);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOLLAR_OP
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_QUOT_OP) {
          tempParsingResult = parseTypeParameterList();
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_EQ_OP);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_20 [tokenType]) {
          tempParsingResult = parseTypeInformation();
          result.AppendNewChild (tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_21 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage73());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInTypeDeclaration (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInTypeDeclaration (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_21 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeDefinition () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TYPE_DEFINITION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_TYPE);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeDeclaration();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_AND);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseTypeDeclaration();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = parseTypeExpressionFun();
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_22 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage74());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInTypeExpression ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeExpressionFun () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseTypeExpressionTuple();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RARROW_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.FUNCTION_TYPE);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RARROW_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseTypeExpressionFun();
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_22 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage75());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInTypeExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeExpressionTuple () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseTypeExpressionAppl();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TUPLE_TYPE);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tokenType = myLexer.TokenType;
            if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP) {
              do {
                tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP);
                result.AppendNewChild (tempParsingResult);
                tempParsingResult = parseTypeExpressionAppl();
                result.AppendNewChild (tempParsingResult);
                tokenType = myLexer.TokenType;
              }
              while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_ASTERISK_OP);
            } else {
              if (result.firstChild == null) result = null;
              throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage76());
            }
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_22 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage77());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInTypeExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeExpressionAppl () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        TreeElement recursive = parseTypeExpressionSimple();
        if ( ! (recursive is CompositeElement) ) return recursive;
        result = (CompositeElement) recursive;
        restartLevel:
        while (true) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ONE_PARAMETER_TYPE_REFERENCE);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = parseTypeReference();
            result.AppendNewChild (tempParsingResult);
          } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKET_OP) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.ARRAY_TYPE);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACKET_OP);
            result.AppendNewChild (tempParsingResult);
            tokenType = myLexer.TokenType;
            while(tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP) {
              tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
              result.AppendNewChild (tempParsingResult);
              tokenType = myLexer.TokenType;
            }
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACKET_OP);
            result.AppendNewChild (tempParsingResult);
          } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LAZY) {
            CompositeElement tempRoot = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.LAZY_TYPE);
            tempRoot.AppendNewChild (result);
            result = tempRoot;
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LAZY);
            result.AppendNewChild (tempParsingResult);
          } else break;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_22 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage78());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInTypeExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeExpressionSimple () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOLLAR_OP
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_QUOT_OP) {
          tempParsingResult = parseTypeParameterReference();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_UNDERLINE_OP) {
          tempParsingResult = parseUnderlineType();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseParenthesizedType();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseMultiParameterTypeReference();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseWithoutParameterTypeReference();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage79());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_22 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage80());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInTypeExpression ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement handleErrorInTypeExpression (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_22 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeInformation () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACE_OP
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP) {
          tempParsingResult = parseTypeRepresentation();
        } else if (tokenType != null && TokenBitsets.TokenBitset_17 [tokenType]) {
          tempParsingResult = parseTypeExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseTypeRefOrConstructorDecl();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage81());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_21 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage82());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInTypeInformation ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement handleErrorInTypeInformation (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_21 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeParameterDeclaration () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TYPE_PARAMETER_DECLARATION);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_QUOT_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_QUOT_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOLLAR_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOLLAR_OP);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage83());
        }
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_23 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage84());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInTypeParameterDeclaration (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInTypeParameterDeclaration (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_23 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeParameterList () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TYPE_PARAMETER_LIST);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseTypeParameterDeclaration();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          while (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP) {
            tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COMMA_OP);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseTypeParameterDeclaration();
            result.AppendNewChild (tempParsingResult);
            tokenType = myLexer.TokenType;
          }
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOLLAR_OP
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_QUOT_OP) {
          tempParsingResult = parseTypeParameterDeclaration();
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage85());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeParameterReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TYPE_PARAMETER_REFERENCE);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_QUOT_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_QUOT_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOLLAR_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOLLAR_OP);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage86());
        }
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeRefOrConstructorDecl () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TYPE_REF_OR_CONSTRUCTOR_DECL);
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TYPE_REFERENCE);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseModuleReference();
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseIdentifier();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeRepresentation () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_OR_OP) {
          tempParsingResult = parseAlgebraicTypeRepresentation();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACE_OP) {
          tempParsingResult = parseRecordTypeRepresentation();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage87());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        }
        throw;
      }
      return tempParsingResult;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeSchemeExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      TreeElement param = null;
      try {
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_17 [tokenType]) {
          tempParsingResult = parseTypeExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOLLAR_OP
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_QUOT_OP) {
          tempParsingResult = parseTypeParameterDeclaration();
          param = tempParsingResult;
          tempParsingResult = parseForAllTypeExpression(param);
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage88());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACE_OP
            ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP)  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage89());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInTypeSchemeExpression ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement handleErrorInTypeSchemeExpression (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACE_OP
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_SEMICOLON_OP)  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeTestExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lparenth = null;
      TreeElement expression = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TYPE_TEST_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
        lparenth = tempParsingResult;
        tempParsingResult = parseExpression();
        expression = tempParsingResult;
        parseTypeTestExpressionAux(result, lparenth, expression);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseTypeTestExpressionAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lparenth, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement expression) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lparenth;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = expression;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONQUEST_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypeTestPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TYPE_TEST_PATTERN);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONQUEST_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypedExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lparenth = null;
      TreeElement expression = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TYPED_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
        lparenth = tempParsingResult;
        tempParsingResult = parseExpression();
        expression = tempParsingResult;
        parseTypedExpressionAux(result, lparenth, expression);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseTypedExpressionAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lparenth, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement expression) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lparenth;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = expression;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLON_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseTypedPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lparenth = null;
      TreeElement pattern = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.TYPED_PATTERN);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
        lparenth = tempParsingResult;
        tempParsingResult = parsePattern();
        pattern = tempParsingResult;
        parseTypedPatternAux(result, lparenth, pattern);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (pattern != null) result.AppendNewChild (pattern);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseTypedPatternAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lparenth, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement pattern) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lparenth;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = pattern;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLON_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (pattern != null) result.AppendNewChild (pattern);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseUnaryExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUSDOT_OP
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUS_OP) {
          tempParsingResult = parseUnaryMinusExpression();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_EXCL
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_QUEST
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.OPERATOR_TILDE) {
          tempParsingResult = parsePrefixOperatorExpression();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage90());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        }
        throw;
      }
      return tempParsingResult;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseUnaryMinusExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.UNARY_MINUS_EXPRESSION);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUS_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUS_OP);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUSDOT_OP) {
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_MINUSDOT_OP);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage91());
        }
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseUnderlinePattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.UNDERLINE_PATTERN);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_UNDERLINE_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseUnderlineType () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.UNDERLINE_TYPE);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_UNDERLINE_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseUnit () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.UNIT);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseUpcastExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.UPCAST_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_UPCAST);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseUpcastExpressionToType () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      TreeElement lparenth = null;
      TreeElement expression = null;
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.UPCAST_EXPRESSION_TO_TYPE);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP);
        lparenth = tempParsingResult;
        tempParsingResult = parseExpression();
        expression = tempParsingResult;
        parseUpcastExpressionToTypeAux(result, lparenth, expression);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseUpcastExpressionToTypeAux (CompositeElement result, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lparenth, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement expression) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = lparenth;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = expression;
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLONGT_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RPARENTH_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (lparenth != null && lparenth.Parent == null) {
          if (lparenth != null) result.AppendNewChild (lparenth);
          if (expression != null) result.AppendNewChild (expression);
        }
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseValueDeclarationPattern () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.VALUE_DECLARATION_PATTERN);
        tempParsingResult = parseValueName();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseValueName () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseIdentifier();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseOperatorName();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage92());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        }
        throw;
      }
      return tempParsingResult;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseValueReferenceExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.VALUE_REFERENCE_EXPRESSION);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseModuleReference();
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DOT_OP);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = parseValueName();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseValueReferenceExpressionOld () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER
          ||tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LPARENTH_OP) {
          tempParsingResult = parseQualifiedValueReference();
        } else if (tokenType == JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseQualifiedIdReference();
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage93());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage94());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult == null) {
          e.ParsingResult = tempParsingResult;
        } else {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = handleErrorInValueReferenceExpressionOld ((CompositeElement)tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement handleErrorInValueReferenceExpressionOld (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseValueSpecification () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.VALUE_SPECIFICATION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_VAL);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseValueName();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_COLON_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseTypeExpression();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseWhileStatementExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.WHILE_STATEMENT_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_WHILE);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DO);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_DONE);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseWithRecordExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.WITH_RECORD_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_LBRACE_OP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseExpression();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_WITH);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseFieldAssignmentList();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.Psi.FSharp.Impl.TokenType.KEYWORD_RBRACE_OP);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseWithoutParameterTypeReference () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.Psi.FSharp.Impl.ElementType.WITHOUT_PARAMETER_TYPE_REFERENCE);
        tempParsingResult = parseTypeReference();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
  }
}
